[{"url":"cheatsheets/","title":"Cheatsheets","tags":["welcome"],"text":"Cheatsheets Getting Started with Julia - live . Fastrack to Julia  cheatsheet. MATLAB-Julia-Python comparative cheatsheet  by  QuantEcon group Plots.jl cheatsheet"},{"url":"classes/","title":"Lecture Schedule","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n History of Seismology Discrete Linear Inverse Problems Formulation of discrete linear inverse problem  Gm=d ; Row and column interpretations of matrix-vector  Gm  and matrix-matrix  GH  products Overdetermined and underdeterminded systems; Linear (in)dependence, basis vectors; independence-dimension inequality Left (right) inverses of a matrix with independent column (row) vectors; Gram matrix; pseudo inverses; solving linear equations with the inverses Solving inverse problems via matrix factorization;  CR  Column times Row and  QR  factorizations Example of fitting a polynomial using temperature anomaly data Singular Value Decomposition; Factor Analysis; Examples from chemical analysis of ocean sediments Analysis of spatial patterns in atmospheric pressure - Assignment Formulaton of gravity inversion - Assignment Least-squares; Coordinate Descent Algorithm, Lasso, Ridge Regression, Elastic-Net Demonstration of Elastic-Net using the gravity problem - Assignment Pseudoinverse via SVD; Importance of setting tolerance with noisy data; Demonstration using Deconvolution Problem - Assignment Gradient, Hessian, and their interpretations Data and model resolution matrices Probabilistic inverse problems Monte Carlo methods Learning Learning problems; Shallow Neural Networks Why Deep Learning; Loss Functions; Maximum Likelihood Approach for Regression and Classification Problems Bias-variance Tradeoff; K-means clustering Gaussian Mixture Models (some topics) Sparse Principal Component Analysis\nSplit Methods\nMatrix Completion Using NeuralNetworks\nExample from seismic imaging: traveltime tomography"},{"url":".","title":"index","tags":["homepage"],"text":""},{"url":"installation/","title":"Software installation","tags":["welcome"],"text":"First-time setup: Install Julia & Pluto Text and pictures version: Step 1: Install Julia  1.8.2 Go to  https://julialang.org/downloads  and download the current stable release, Julia  1.8.2 , using the correct version for your operating system (Linux x86, Mac, Windows, etc). Step 2: Run Julia After installing,  make sure that you can run Julia . On some systems, this means searching for the “Julia  1.8.2 ” program installed on your computer; in others, it means running the command  julia  in a terminal. Make sure that you can execute  1 + 1 : Make sure that you are able to launch Julia and calculate  1+1  before proceeding! Step 3: Install  Pluto Next we will install the  Pluto , the notebook environment that we will be using during the course. Pluto is a Julia  programming environment  designed for interactivity and quick experiments. Open the  Julia REPL . This is the command-line interface to Julia, similar to the previous screenshot. Here you type  Julia commands , and when you press ENTER, it runs, and you see the result. To install Pluto, we want to run a  package manager command . To switch from  Julia  mode to  Pkg  mode, type  ]  (closing square bracket) at the  julia>  prompt: \njulia> ]\n\n(@v 1.8 ) pkg>\n The line turns blue and the prompt changes to  pkg> , telling you that you are now in  package manager mode . This mode allows you to do operations on  packages  (also called libraries). To install Pluto, run the following (case sensitive) command to  add  (install) the package to your system by downloading it from the internet.\nYou should only need to do this  once  for each installation of Julia: \n(@v 1.8 ) pkg> add Pluto\n This might take a couple of minutes, so you can go get yourself a cup of tea! You can now close the terminal. Step 4: Use a modern browser: Mozilla Firefox or Google Chrome We need a modern browser to view Pluto notebooks with. Firefox and Chrome work best. Second time:  Running Pluto & opening a notebook Repeat the following steps whenever you want to work on a project or homework assignment. Step 1: Start Pluto Start the Julia REPL, like you did during the setup. In the REPL, type: julia> using Pluto\n\njulia> Pluto.run()\n The terminal tells us to go to  http://localhost:1234/  (or a similar URL). Let’s open Firefox or Chrome and type that into the address bar. If you’re curious about what a  Pluto notebook  looks like, have a look at the  Featured Notebooks . These notebooks are useful for learning some basics of Julia programming. If you want to hear the story behind Pluto, have a look a the  JuliaCon presentation . If nothing happens in the browser the first time, close Julia and try again. And please let us know! Step 2a: Opening a notebook from the web This is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a  template notebook , available in this GitHub repository. To start from a template notebook on the web, you can  paste the URL into the blue box  and press ENTER. For example, homework 0 is available  here . Go to this page, and on the top right, click on the button that says “Edit or run this notebook”. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box. The first thing we will want to do is to save the notebook somewhere on our own computer; see below. Step 2b: Opening an existing notebook file When you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off. If you want to run a local notebook file that you have not opened before, then you need to enter its  full path  into the blue box in the main menu. More on finding full paths in step 3. Step 3: Saving a notebook We first need a folder to save our homework in. Open your file explorer and create one. Next, we need to know the  absolute path  of that folder. Here’s how you do that in  Windows ,  MacOS  and  Ubuntu . For example, you might have: C:\\Users\\fons\\Documents\\18S191_assignments\\  on Windows /Users/fons/Documents/18S191_assignments/  on MacOS /home/fons/Documents/18S191_assignments/  on Ubuntu Now that we know the absolute path, go back to your Pluto notebook, and at the top of the page, click on  “Save notebook…” . This is where you type the  new path+filename for your notebook : Click  Choose . Step 4: Sharing a notebook After working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas. \nconst run = f => f();\nrun(async () => {\nconst versions = await (await fetch(`https://julialang-s3.julialang.org/bin/versions.json`)).json()\nconst version_names = Object.keys(versions).sort().reverse()\nconst stable = version_names.find(v => versions[v].stable)\nconsole.log({stable})\nconst pkg_stable = /\\d+\\.\\d+/.exec(stable)[0]\ndocument.querySelectorAll(\"auto-julia-version\").forEach(el => {\n    console.log(el)\n    el.innerText = el.getAttribute(\"short\") == null ? stable : pkg_stable\n})\n});"},{"url":"introduction/","title":"Introduction","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n Seismology: Unveiling Earth’s Vibrations Seismology is the scientific study of earthquakes and the vibrations they generate within the Earth. By analyzing these seismic waves, seismologists can gain valuable insights into the structure and dynamics of our planet. Through the use of specialized instruments called seismometers, seismologists measure and record the ground motion caused by earthquakes. These recordings, known as seismograms, provide crucial data that can be used to understand the behavior of seismic waves as they propagate through different layers of the Earth. Seismology plays a vital role in various fields, including earthquake engineering, hazard assessment, and the exploration of natural resources. By studying seismic activity, scientists can assess the potential risks associated with earthquakes, develop strategies for building resilient structures, and even locate underground oil and gas reservoirs. In this course, we will delve into the fascinating world of seismology, exploring the principles and techniques used to analyze seismic data. By the end of this journey, you will have a solid foundation in seismology and be equipped with the tools to interpret seismic waves and unravel the secrets hidden beneath our feet. Let’s embark on this seismic adventure and discover the captivating realm of seismology together."},{"url":"logistics/","title":"Course Logistics","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n Grading Assignments (40%); Mid term presentations (30%); End term exam (30%) Late assignments will receive no credit, please submit Mid/End Term Exams Open book exams, where you will have access to textbook chapters/ other reading material. The exam duration will be 3 Hrs.\nThe only thing that will not be allowed is interaction with peers."},{"url":"references/","title":"References","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n Books Aki, Keiiti, and Paul G. Richards. Quantitative seismology. 2002. Shearer, Peter M. Introduction to seismology. Cambridge university press, 2019. Stein, Seth, and Michael Wysession. An introduction to seismology, earthquakes, and earth structure. John Wiley & Sons, 2009. Other Resources Live Jupyter Notebooks for Seismology Pluto Resources Pluto repository at Github How to Install Pluto  (straight from the main author Fons van der Plas) Sample notebooks are available via the index page after starting Pluto."},{"url":"search/","title":"Search results","tags":[],"text":"window.init_search(); Search Results \nLoading..."},{"url":"assets/scripts/get_highlights/","title":"get_highlights","tags":[],"text":"if isempty get metadata \"homepage\" , \"highlights\", nothing else highlights htl \"\"\" section div class \"content\" h2 x \"name\" h2 p x \"text\" p div div class \"preview\" img src \" x \"img\" \" div section \"\"\" for x in metadata \"homepage\" \"highlights\" htl \"\"\" div class \"subjectscontainer wide\" h1 Highlights h1 div class \"contain\" highlights div div \"\"\" end"},{"url":"assets/scripts/get_subjects/","title":"get_subjects","tags":[],"text":"let sections metadata \"sidebar\" sections htl \"\"\" let input other page.input output other page.output name get output.frontmatter, \"title\", basename input.relative path desc get output.frontmatter, \"description\", nothing tags get output.frontmatter, \"tags\", String image get output.frontmatter, \"image\", nothing class \"no decoration\", \"tag replace x, \" \" \" \" \" for x in tags ..., image nothing || isempty image ? nothing htl \"\"\" a title desc class class href root url \" \" other page.url h3 name h3 img src image a \"\"\" end for other page in collections section id .pages \"\"\" for section id, section name in sections isempty sections ? nothing htl \"\"\" div class \"wide subjectscontainer\" h1 Subjects h1 div class \"subjects\" sections div div \"\"\" end"},{"url":"notebooks/waves-on-string/","title":"Waves On A String","tags":["notebooks"],"text":" A Pluto.jl notebook v0.19.43 frontmatter title \"Waves On A String\" tags \"notebooks\" layout \"layout.jlhtml\" description \"Simulates wave propagation on a string\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using FFTW, PlutoPlotly, PlutoUI, LinearAlgebra using ParallelStencil using ParallelStencil.FiniteDifferences1D using Printf, Statistics end TableOfContents md\"\"\" Waves On A String This notebook simulates wave propagation on a string using parallel computing techniques. The core function, `model string`, initializes the simulation environment and defines two parallel functions `compute vy ` and `compute σ `, which update the velocity and stress fields, respectively. The simulation parameters include the shear modulus `μ0` , density `ρ0` , spatial grid `xgrid` , and temporal grid tgrid . The notebook sets up the numerical grid, allocates arrays for stress `σ` and velocity `vy` , and initializes the velocity field with a Gaussian distribution. The medium's properties are heterogeneous, with boundary marked by the red line. Interactive Seismology Notebooks https pawbz.github.io Interactive Seismology.jl Instructor Pawan Bharadwaj , Indian Institute of Science, Bengaluru, India \"\"\" md\" Medium\" begin nx 1000 xgrid range 100, 100, length nx end ρ0 Float32 3.22 10^ 3 10^15 density in kg km3 μ0 Float32 82 10^9 10^3 invρ0 inv ρ0 invμ0 inv μ0 medium ref values μ0, invμ0, ρ0, invρ0 vs0 sqrt. μ0 . ρ0 begin courant number 0.1 lets calculate the min distance from the center to the edge of the domain r min xgrid end xgrid 1 0.5 choose time stepping dt to satisfy Courant condition dt courant number step xgrid inv vs0 nt Int floor r vs0 dt 2 tgrid range 0, length nt, step dt nothing end md\"\"\"Time bind T Slider tgrid, show value true Boundary Position bind X Slider xgrid, show value true, default 0 \"\"\" md\" Governing Equations\" md\"\"\" Velocity v y and Stress \\sigma ```math \\rho\\,\\partial t v y \\partial x \\sigma \\quad 1 ``` and ```math \\partial t \\sigma \\mu\\partial x v y \\quad 2 ``` \"\"\" md\"\"\" Simulation \"\"\" views function model string μ0, ρ0, xgrid, tgrid, X init parallel stencil Threads, Float32, 1 parallel function compute vy vy Data.Array, σ Data.Array, dt Data.Number, ρ Data.Array, dx Data.Number inn vy inn vy dt all ρ d σ dx return end parallel function compute σ σ Data.Array, vy Data.Array, dt Data.Number, μ Data.Array, dx Data.Number all σ all σ dt all μ d vy dx return end Derived numerics nx length xgrid numerical grid resolution should be a mulitple of 32 1 for optimal GPU perf nt length tgrid number of timesteps dx Float32 step xgrid cell size dt Float32 step tgrid Array allocations σ zeros nx 1 vy zeros nx Initial conditions vy initial exp. 0.11 . xgrid . 50 .^ 2 copyto vy, vy initial Medium μ zeros nx 1 fill μ, Float32 μ0 ρ zeros nx fill ρ, Float32 ρ0 perturb density of the string iX argmin abs. xgrid . X ρ1 view ρ, 1 iX rmul ρ1, 4.0f0 vysave zeros nx 1, nt Time loop for it 1 nt parallel compute σ σ, vy, dt, μ, dx parallel compute vy vy, σ, dt, ρ, dx save vy vys view vysave, , it copyto vys, vy end return vysave end vy save model string μ0, ρ0, xgrid, tgrid, X md\" Appendix\" md\" Plot\" default plotly template plotly dark function plot string vy save, X, T iT argmin abs. tgrid . T fig Plot scatter x xgrid, y vy save , iT , Layout title \"String's vertical displacement at round T, digits 2 s, with interface at round X, digits 2 km\", width 700, height 300, xaxis attr title \"Distance\" , yaxis attr title \"Amplitude\", range 1.2, 1.2 add vline fig, X, line color \"red\", opacity 1, layer \"below\", line width 2, add vline fig, xgrid 1 , line color \"white\", opacity 1, layer \"below\", line width 2, add vline fig, xgrid end , line color \"white\", opacity 1, layer \"below\", line width 2, plot fig end plot string vy save, X, T "},{"url":"planewaves/tbu/","title":"To be updated","tags":["mod1"],"text":"COMING SOON"},{"url":"surface-waves/tbu/","title":"To be updated","tags":["mod1"],"text":"COMING SOON"}]