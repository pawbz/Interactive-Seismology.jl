[{"url":"cheatsheets/","title":"Cheatsheets","tags":["welcome"],"text":"Cheatsheets Getting Started with Julia - live . Fastrack to Julia  cheatsheet. MATLAB-Julia-Python comparative cheatsheet  by  QuantEcon group Plots.jl cheatsheet"},{"url":"classes/","title":"Lecture Schedule","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n History of Seismology Discrete Linear Inverse Problems Formulation of discrete linear inverse problem  Gm=d ; Row and column interpretations of matrix-vector  Gm  and matrix-matrix  GH  products Overdetermined and underdeterminded systems; Linear (in)dependence, basis vectors; independence-dimension inequality Left (right) inverses of a matrix with independent column (row) vectors; Gram matrix; pseudo inverses; solving linear equations with the inverses Solving inverse problems via matrix factorization;  CR  Column times Row and  QR  factorizations Example of fitting a polynomial using temperature anomaly data Singular Value Decomposition; Factor Analysis; Examples from chemical analysis of ocean sediments Analysis of spatial patterns in atmospheric pressure - Assignment Formulaton of gravity inversion - Assignment Least-squares; Coordinate Descent Algorithm, Lasso, Ridge Regression, Elastic-Net Demonstration of Elastic-Net using the gravity problem - Assignment Pseudoinverse via SVD; Importance of setting tolerance with noisy data; Demonstration using Deconvolution Problem - Assignment Gradient, Hessian, and their interpretations Data and model resolution matrices Probabilistic inverse problems Monte Carlo methods Learning Learning problems; Shallow Neural Networks Why Deep Learning; Loss Functions; Maximum Likelihood Approach for Regression and Classification Problems Bias-variance Tradeoff; K-means clustering Gaussian Mixture Models (some topics) Sparse Principal Component Analysis\nSplit Methods\nMatrix Completion Using NeuralNetworks\nExample from seismic imaging: traveltime tomography"},{"url":".","title":"index","tags":["homepage"],"text":""},{"url":"installation/","title":"Software installation","tags":["welcome"],"text":"First-time setup: Install Julia & Pluto Text and pictures version: Step 1: Install Julia  1.8.2 Go to  https://julialang.org/downloads  and download the current stable release, Julia  1.8.2 , using the correct version for your operating system (Linux x86, Mac, Windows, etc). Step 2: Run Julia After installing,  make sure that you can run Julia . On some systems, this means searching for the “Julia  1.8.2 ” program installed on your computer; in others, it means running the command  julia  in a terminal. Make sure that you can execute  1 + 1 : Make sure that you are able to launch Julia and calculate  1+1  before proceeding! Step 3: Install  Pluto Next we will install the  Pluto , the notebook environment that we will be using during the course. Pluto is a Julia  programming environment  designed for interactivity and quick experiments. Open the  Julia REPL . This is the command-line interface to Julia, similar to the previous screenshot. Here you type  Julia commands , and when you press ENTER, it runs, and you see the result. To install Pluto, we want to run a  package manager command . To switch from  Julia  mode to  Pkg  mode, type  ]  (closing square bracket) at the  julia>  prompt: \njulia> ]\n\n(@v 1.8 ) pkg>\n The line turns blue and the prompt changes to  pkg> , telling you that you are now in  package manager mode . This mode allows you to do operations on  packages  (also called libraries). To install Pluto, run the following (case sensitive) command to  add  (install) the package to your system by downloading it from the internet.\nYou should only need to do this  once  for each installation of Julia: \n(@v 1.8 ) pkg> add Pluto\n This might take a couple of minutes, so you can go get yourself a cup of tea! You can now close the terminal. Step 4: Use a modern browser: Mozilla Firefox or Google Chrome We need a modern browser to view Pluto notebooks with. Firefox and Chrome work best. Second time:  Running Pluto & opening a notebook Repeat the following steps whenever you want to work on a project or homework assignment. Step 1: Start Pluto Start the Julia REPL, like you did during the setup. In the REPL, type: julia> using Pluto\n\njulia> Pluto.run()\n The terminal tells us to go to  http://localhost:1234/  (or a similar URL). Let’s open Firefox or Chrome and type that into the address bar. If you’re curious about what a  Pluto notebook  looks like, have a look at the  Featured Notebooks . These notebooks are useful for learning some basics of Julia programming. If you want to hear the story behind Pluto, have a look a the  JuliaCon presentation . If nothing happens in the browser the first time, close Julia and try again. And please let us know! Step 2a: Opening a notebook from the web This is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a  template notebook , available in this GitHub repository. To start from a template notebook on the web, you can  paste the URL into the blue box  and press ENTER. For example, homework 0 is available  here . Go to this page, and on the top right, click on the button that says “Edit or run this notebook”. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box. The first thing we will want to do is to save the notebook somewhere on our own computer; see below. Step 2b: Opening an existing notebook file When you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off. If you want to run a local notebook file that you have not opened before, then you need to enter its  full path  into the blue box in the main menu. More on finding full paths in step 3. Step 3: Saving a notebook We first need a folder to save our homework in. Open your file explorer and create one. Next, we need to know the  absolute path  of that folder. Here’s how you do that in  Windows ,  MacOS  and  Ubuntu . For example, you might have: C:\\Users\\fons\\Documents\\18S191_assignments\\  on Windows /Users/fons/Documents/18S191_assignments/  on MacOS /home/fons/Documents/18S191_assignments/  on Ubuntu Now that we know the absolute path, go back to your Pluto notebook, and at the top of the page, click on  “Save notebook…” . This is where you type the  new path+filename for your notebook : Click  Choose . Step 4: Sharing a notebook After working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas. \nconst run = f => f();\nrun(async () => {\nconst versions = await (await fetch(`https://julialang-s3.julialang.org/bin/versions.json`)).json()\nconst version_names = Object.keys(versions).sort().reverse()\nconst stable = version_names.find(v => versions[v].stable)\nconsole.log({stable})\nconst pkg_stable = /\\d+\\.\\d+/.exec(stable)[0]\ndocument.querySelectorAll(\"auto-julia-version\").forEach(el => {\n    console.log(el)\n    el.innerText = el.getAttribute(\"short\") == null ? stable : pkg_stable\n})\n});"},{"url":"introduction/","title":"Introduction","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n Earth, in all its grand complexity, whispers its secrets through an orchestra of data. In this course, we’ll become skilled detectives, equipped with powerful analytical tools to decode these whispers and unlock the mysteries of our planet. Let’s imagine Earth as a puzzle box, with three chambers holding the keys to understanding its dynamic processes. The first chamber houses the measured quantities, fingerprints of its current state. The second holds the governing laws, the hidden rules that orchestrate its dance. And finally, in the third chamber lie the hidden parameters, unseen yet crucial players in this grand story. This course equips you with the skills to tackle various challenges, depending on what’s known and what needs to be revealed. We’ll dive into: Inverse Problems : When the rules are known but the players hiding in the shadows remain unseen. Like a detective reconstructing a crime scene, we’ll use data and laws to unmask these hidden parameters. Learning Problems : When the rules themselves are shrouded in mystery. We’ll become data-driven alchemists, transforming information into a map of the underlying laws that govern Earth’s behavior. Design Problems : Before the experiment even begins, we’ll become master strategists, designing data acquisition to optimally reveal the hidden secrets we seek. Throughout this journey, we’ll explore a diverse range of Earth science applications, from predicting climate change to understanding earthquakes. You’ll not only gain technical skills in data analysis but also forge a deeper connection with our planet, appreciating its interconnectedness and learning to ask the right questions to unlock its secrets."},{"url":"logistics/","title":"Course Logistics","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n Grading Describe here the logistics of your class."},{"url":"references/","title":"References","tags":["welcome"],"text":"main a img {\n    width: 5rem;\n    margin: 1rem;\n}\n Books Aki, Keiiti, and Paul G. Richards. Quantitative seismology. 2002. Shearer, Peter M. Introduction to seismology. Cambridge university press, 2019. Stein, Seth, and Michael Wysession. An introduction to seismology, earthquakes, and earth structure. John Wiley & Sons, 2009. Other Resources Live Jupyter Notebooks for Seismology Pluto Resources Pluto repository at Github How to Install Pluto  (straight from the main author Fons van der Plas) Sample notebooks are available via the index page after starting Pluto."},{"url":"search/","title":"Search results","tags":[],"text":"window.init_search(); Search Results \nLoading..."},{"url":"assets/scripts/get_highlights/","title":"get_highlights","tags":[],"text":"if isempty get metadata \"homepage\" , \"highlights\", nothing else highlights htl \"\"\" section div class \"content\" h2 x \"name\" h2 p x \"text\" p div div class \"preview\" img src \" x \"img\" \" div section \"\"\" for x in metadata \"homepage\" \"highlights\" htl \"\"\" div class \"subjectscontainer wide\" h1 Highlights h1 div class \"contain\" highlights div div \"\"\" end"},{"url":"assets/scripts/get_subjects/","title":"get_subjects","tags":[],"text":"let sections metadata \"sidebar\" sections htl \"\"\" let input other page.input output other page.output name get output.frontmatter, \"title\", basename input.relative path desc get output.frontmatter, \"description\", nothing tags get output.frontmatter, \"tags\", String image get output.frontmatter, \"image\", nothing class \"no decoration\", \"tag replace x, \" \" \" \" \" for x in tags ..., image nothing || isempty image ? nothing htl \"\"\" a title desc class class href root url \" \" other page.url h3 name h3 img src image a \"\"\" end for other page in collections section id .pages \"\"\" for section id, section name in sections isempty sections ? nothing htl \"\"\" div class \"wide subjectscontainer\" h1 Subjects h1 div class \"subjects\" sections div div \"\"\" end"},{"url":"planewaves/tbu/","title":"To be updated","tags":["mod1"],"text":"COMING SOON"},{"url":"surface-waves/tbu/","title":"To be updated","tags":["mod1"],"text":"COMING SOON"}]