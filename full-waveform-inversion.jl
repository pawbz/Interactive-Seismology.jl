### A Pluto.jl notebook ###
# v0.19.22

#> [frontmatter]
#> title = "Seismic Full Waveform Inversion"
#> description = "A notebook that demonstrates how interactivity makes seismic full waveform inversion more accessible and intuitive."

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID("6e696c72-6542-2067-7265-42206c756150"), "AbstractPlutoDingetjes")].Bonds.initial_value catch; b -> missing; end
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)
        el
    end
end

# ╔═╡ c5815f5e-9164-11ec-10e1-691834761dff
begin
  using FFTW
  using LinearAlgebra
  using LaTeXStrings
  using PlutoUI
  using Statistics
  using ProgressLogging
  using SparseArrays
  using DSP
  using PlutoPlotly
  using LossFunctions
  using MLUtils
  using FiniteDifferences
  using ForwardDiff
  using Optim
  using LineSearches
end

# ╔═╡ 3c540889-49dc-415c-acbc-3494897b260c
TableOfContents()

# ╔═╡ 9c32f5bc-f6d1-4048-903a-27224aaa1f40
md"""
# Full Waveform Inversion (SH Waves)

Seismic full waveform inversion (FWI) is a powerful technique for imaging the Earth's subsurface using seismic waves. However, FWI can be computationally intensive and require a deep understanding of numerical methods and algorithms. This notebook demonstrates how interactivity makes FWI more accessible and intuitive.
Pseudo-spectral methods are used to solve the 2-D SH stress-velocity system.
The particle velocity and stress fields are staggered in time and we use a simple explicit time-stepping approach.


##### [Interactive Seismology Notebooks](https://pawbz.github.io/Interactive-Seismology.jl/)

Instructor: *Pawan Bharadwaj*,
Indian Institute of Science, Bengaluru, India
"""

# ╔═╡ 881c7368-57df-469a-96ec-821512cf98e0
md"""## True Medium
Consider a mantle-like medium that has density of $3.22$ $g/cc$ and shear modulus of $82$ $GPa$ . Shear wave velocity is $≈5$ $km$ $s^{-1}$. Suppose it has a reflector such that the medium has a higher density below the reflector compared to above. You can specify the location, density and bulk modulus of the reflector below.
"""

# ╔═╡ cb83dbd1-c423-4b27-b29e-7dc8051f43d5
md"""
## Acquistion Geometry
Choose the number of sources and receivers to be used in the simulation.
"""

# ╔═╡ 2855c8cf-8364-4c6c-a122-781b99440e89
md"""## Body Forces
The body force generated by the source is modelled as a Ricker wavelet whose peak frequency (in Hz) is chosen as follows.
"""

# ╔═╡ 8d3a571b-0e81-435a-9665-7e1584b55370
@bind s_fp PlutoUI.combine() do Child
	md"""
	Peak frequency of source =  $(Child(Slider(range(start=1,stop=20,step=1),default=2,show_value=true))) Hz
	"""
end

# ╔═╡ d31ef4d7-3e58-4b6e-99dd-f25656d109b5
source_fpeak = s_fp[1];

# ╔═╡ 122c2aa4-baec-4288-ab53-afa1d977c486
md"""## Spatial Grids
Let us set up the spatial parameters of the simulation. We define a 2-D spatial grid of extents $x∈[-40,40]$ km and $z∈[0,40]$ km. The size of each grid cell is computed such that it is greater than $\frac{λ}{6}$ of the true medium.
"""

# ╔═╡ 5b271e5f-879c-4c43-825a-9660f322febd
md"""## Time Grid
In order to study the propagation of the wave-front, we need to choose a time step that satisfies the Courant condition. Here, we have chosen the Courant number to be $0.2$.
"""

# ╔═╡ dd78c460-a446-46f5-af57-7e859383348d
md"""
Let us now create a NamedTuple that stores all the grid related parameters.
"""

# ╔═╡ e233afec-6049-4277-8be9-95687c4589b5
md"""
## Generate Observed Data
Pseudo spectral method is applied for solving the seismic equation given the true medium parameters. Wavefields at the receivers are recorded and observed data is generated.
"""


# ╔═╡ 22b8db91-73a0-46df-87fd-7cf0b66ee37d
md"""
## Reference Medium
This will also serve as an initial model during inversion. Medium without the reflector is considered.
"""

# ╔═╡ 104dc052-f82a-4dea-a899-749db38a3fea
md"""
Let us now simulate the wavefields for this reference medium and record data at the receivers.
"""

# ╔═╡ a3a9deea-e2d6-4d58-90d7-5a54be176289
md"## Adjoint Simulation"

# ╔═╡ 1dc2ca10-5ba3-4efa-b6d9-d203cf91598b
md"Deviation between the observed and modelled data is referred to as the data error and it acts as the forcing in the case of adjoint simulation."

# ╔═╡ 66f9c698-61e3-4b61-aff3-dfc67eb2f6af
md"""
## Gradients
Gradients with respect to ρ/ρ₀ and μ⁻¹/μ⁻¹₀ are computed here.
"""

# ╔═╡ bc8a0c2c-3d92-46a5-ab3f-fec75f4a5863
md"""
Forward and adjoint fields as well as the propagation of the gradients are visualized below. Notice the firing of receivers in the adjoint fields as time progresses (the receivers get activated when the source wavefield reaches them). The gradients illuminate the reflector.
"""

# ╔═╡ 8d161f09-8339-4277-8739-ff76607f7abf
md"""
## Finite-Difference Test (Hockey-Stick Test)
Gradients that have been computed using our formulation are compared with the gradients computed using finite difference. The comparison is done for a few pixels near the centre of the grid.
"""

# ╔═╡ 86389c2b-a762-4b19-ae4a-2744623fa496
md"## Inversion"

# ╔═╡ fc49a6d7-a1b1-458a-a9ad-e120282bbabc
md"""
## Appendix
"""

# ╔═╡ bf807de9-fb16-4dbb-b3dd-2bb1ef52feaf
md"""
### Spatial Grid Resolution
We compute the average velocity of the true medium by discretizing the space. The wavelength ($λ$) of the true medium is computed and the grid resolution is chosen such that the size of the grid cell is lesser than $\frac{λ}{6}$.
"""

# ╔═╡ ae8012be-e7ab-4e85-a27f-febf08b3380b
md"""### Absorbing Boundaries
In order to avoid the reflection of the waves from the edges of the medium, we need to incorporate gradual attenuation of the waves as it propagates towards the boundaries of the spatial grid. This is achieved by creating an array that tapers the magnitude as shown towards the edges.
"""

# ╔═╡ ce89710a-48d8-46d4-83b4-163a7eb0a2e5
function get_taper_array(nx, nz; np=50, tapfact=0.20)
  tarray = ones(nz, nx)
  for ix in 1:np
    tarray[:, ix] .= tarray[:, ix] * abs2(exp(-tapfact * abs(np - ix + 1) / np))
    tarray[:, nx-ix+1] .= tarray[:, nx-ix+1] * abs2(exp(-tapfact * abs(np - ix + 1) / np))
  end
  for iz in 1:np
    tarray[iz, :] .= tarray[iz, :] * abs2(exp(-tapfact * abs(np - iz + 1) / np))
    tarray[nz-iz+1, :] .= tarray[nz-iz+1, :] * abs2(exp(-tapfact * abs(np - iz + 1) / np))
  end
  return tarray
end;

# ╔═╡ 9bc38d55-285b-4b83-98d9-d7f9e03405d1
md"""### Medium
Let's consider a mantle-like medium and define reference values for density ($ρ_0$) and bulk modulus ($μ_0$). These are useful for reparameterization. 
"""

# ╔═╡ 706e0c9a-632c-42d9-b648-beb990e81dbb
begin
	ρ0 = 3.22 * 10^-3 * 10^15 # density in kg km⁻³
	μ0 = 82 * 10^9 * 10^3 # shear modulus in kg km⁻¹ s⁻²
	invρ0 = inv(ρ0)
	invμ0 = inv(μ0)
	medium_ref_values = (; μ0, invμ0, ρ0, invρ0)

	# Functions for reparameterization
	χ(m, m0) = log(m / m0)
	invχ(x, m0) = exp(x) * m0
end;

# ╔═╡ dc40de83-621e-48c4-8481-169e1d1f780e
md"""
Function to bundle the ρ and μ of the medium into a single NamedTuple
"""

# ╔═╡ a8ca8464-347c-43c2-823b-516a92d4cc7e
function bundle_medium(μ, ρ)
  return (; μ=μ, ρ=ρ, invρ=inv.(ρ))
end;

# ╔═╡ bc98aa5a-1668-4566-a10c-8bfaade05226
md"""
Function to compute the velocity of the shear waves in the medium
"""

# ╔═╡ ad21da29-f6ff-4a94-be87-4e88640cddbf
# ╠═╡ skip_as_script = true
#=╠═╡
begin
	# e.g., get_vs(mean, medium)
	get_vs(op, medium) = op(sqrt.(medium.μ ./ medium.ρ))
	get_vs(medium) = sqrt.(medium.μ ./ medium.ρ)
end;
  ╠═╡ =#

# ╔═╡ ecac675d-8281-4b6e-a2a3-c75ddf45de47
md"""
Function to re-parameterize the current medium
"""

# ╔═╡ 8298ae48-0ddc-49a9-a43f-8434e4cc3758
function get_x(medium, ref=medium_ref_values)
  return vcat(vec(χ.(medium.ρ, ref.ρ0)), vec(χ.(inv.(medium.μ), ref.invμ0)))
end;

# ╔═╡ e8333b23-53c3-445e-9ca3-6b278359f8ab
md"""### Acquisition
Chosen number of sources and receivers are placed close to the surface of the medium using the following function.
"""

# ╔═╡ 9248af7f-dc1a-4bf6-8f3f-304db73fc604
function get_ageom(xgrid, zgrid, ns, nr; zs=quantile(zgrid, 0.25), zr=quantile(zgrid, 0.25))
  A = (; ns, nr, zs=fill(zs, ns), zr=fill(zr, nr),
    xr=(nr == 1) ? [quantile(xgrid, 0.25)] : range(quantile(xgrid, 0.25), stop=quantile(xgrid, 0.75), length=nr),
    xs=(ns == 1) ? [quantile(xgrid, 0.25)] : range(quantile(xgrid, 0.25), stop=quantile(xgrid, 0.75), length=ns)
  )
  return A
end;

# ╔═╡ d377f637-ffe0-499d-bc4e-9c021a6d7da4
md"""
In the case of adjoint simulation, the forcing is caused by the data residual at the receiver locations. Therefore, the source and receivers need to be flipped as follows.
"""

# ╔═╡ 00a637a6-ddc4-4830-be65-1891d3cb18bc
get_adj_ageom(ageom) = (; nr=ageom.ns, ns=ageom.nr, xs=ageom.xr, zs=ageom.zr, xr=ageom.xs, zr=ageom.zs);

# ╔═╡ 69a34d5f-e120-46b8-823e-cd05a455c015
md"""
For the chosen acquisition geometry, sparse arrays are created that can transform the source and receiver locations to the spatial grids. These arrays are required while applying forcing and recording data during wavefield modeling.
"""

# ╔═╡ e08bf013-00c7-4870-82d8-19b899e7208d
# m are the medium properties that will be used 
function get_projection_matrix(xpos, zpos, xgrid, zgrid; transpose_flag=false, m=ones(length(zgrid), length(xgrid)))
  l = LinearIndices((length(zgrid), length(xgrid)))
  @assert length(xpos) == length(zpos)
  n = length(xpos)
  N = length(xgrid) * length(zgrid)
  I = broadcast(zpos, xpos) do z, x
    iz = argmin(abs.(zgrid .- z))[1]
    ix = argmin(abs.(xgrid .- x))[1]
    return l[iz, ix]
  end
  J = collect(1:n)
  V = m[I]
  return transpose_flag ? sparse(J, I, V, n, N) : sparse(I, J, V, N, n)
end;

# ╔═╡ 6be2f4c2-e9ed-43c2-b66c-ef3176bb9000
md"""
### Fourier Derivatives
We now define methods to compute a 2-D Fourier transform.
```math
\hat{u}(\mathbf{k}, t) = \frac{1}{2\pi}\sum_{\mathbf{x}} u(\mathbf{x}, t) \, e^{-i \mathbf{k}\cdot \mathbf{x}} \ ,
```
*The derivative property of Fourier Transform*: First order differentiation of a function along the $x$ dimension is equivalent to multiplying its Fourier Transform by $\imath k_x$ in the wavenumber domain.\

```math
\partial_xu(\mathbf{x}, t)\leftrightarrow{ik_x}\hat{u}(\mathbf{k}, t).

```
In the following cell, the derivatives are calculated using the functions `Dx!` and `Dz!`. Simply put, these functions compute the Fourier transform, apply the derivative property, and take the inverse Fourier Transform to generate the spatial derivative.
"""

# ╔═╡ 5e4e21a6-a1d1-4c7f-96f6-8ba49a1def29
md"""
### Pseudo spectral methods for SH system
We shall first consider the equation of motion and simplify it to derive the 2-D SH system

```math
\rho{\ddot{{u}}}= \mathbf{\nabla} \cdot \mathbf{\sigma} + {f}. \

```
Lets assume that the \
1) particles are constrained to move only along y direction, i.e., $u_x=u_z=0$
```math
\rho{\ddot{{u_{y}}}}= \partial_x{\sigma_{yx}} +\partial_z{\sigma_{yz}} + {f_y},
```\
2) stresses don't change along $y$ direction to result in
```math
\partial_{y}{\sigma}_{(\cdot)}=0.
```
The constitutive equations are:
```math
\sigma_{yx}=2\mu\epsilon_{yx}=\mu\partial_{x}u_x,

```
```math
\sigma_{yz}=2\mu\epsilon_{yz}=\mu\partial_{z}u_y.

```

Let's now discretize the time dimension and formulate an explicit time-stepping (leap-frog) scheme and alternatively update the velocity and stress fields. We will start with the velocity field
```math
\rho{\dot{v}_y}= \mathrm{Dx}(\sigma_{yx}[it-\tfrac{1}{2}])+ \mathrm{Dz}(\sigma_{yz}[it-\tfrac{1}{2}]),
```
where the finite-difference approximation for the time derivative for timestep $dt$ is:
```math
\frac{\rho({{v_y}[it]-{v_y}[it-1]})}{dt}= \mathrm{Dx}(\sigma_{yx}[it-\tfrac{1}{2}])+ \mathrm{Dz}(\sigma_{yz}[it-\tfrac{1}{2}]),
```
```math
{{v_y}[it]-{v_y}[it-1]}= \frac{dt}{\rho}\left(\mathrm{Dx}(\sigma_{yx}[it-\tfrac{1}{2}])+ \mathrm{Dz}(\sigma_{yz}[it-\tfrac{1}{2}])\right),
```
```math
{v_y}[it]= {v_y}[it-1]+\frac{dt}{\rho}(\mathrm{Dx}(\sigma_{yx}[it-\tfrac{1}{2}])+ \mathrm{Dz}(\sigma_{yz}[it-\tfrac{1}{2}])).
```
Similarly, for updating the stresses,
```math
{\dot{\sigma}_{yx}}= \mu\frac{dv_y}{dx},
```
```math
{\dot{\sigma}_{yz}}= \mu\frac{dv_y}{dz},
```
we can write

```math
\sigma_{yx}[it+\tfrac{1}{2}]=\sigma_{yx}[it-\tfrac{1}{2}]+\mu\mathrm{Dx}(v_y)dt,
```
```math
\sigma_{yz}[it+\tfrac{1}{2}]=\sigma_{yz}[it-\tfrac{1}{2}]+\mu\mathrm{Dz}(v_y)dt.
```
Notice that the temporal grid of stress and velocity are staggered. Finally, let's write a function now that leaps by a given number of steps.
"""

# ╔═╡ b5f7d46c-be1e-46f5-aec3-4525e4ba2d72
md"""
We also need to write functions to initialize and reset the wavefields during the simulation.
"""

# ╔═╡ 9b744e72-07a2-4f8c-b88c-e0b1131794d0
function initialize_fields(pa, nt; snap_store=false)
  nz, nx = pa.nz, pa.nx
  f = (; vy=zeros(nz, nx),
    dvydx=zeros(nz, nx),
    dvydz=zeros(nz, nx),
    σyx=zeros(nz, nx),
    dσyxdx=zeros(nz, nx),
    σyz=zeros(nz, nx),
    dσyzdz=zeros(nz, nx))
  if snap_store
    fs = (; vys=[zeros(nz, nx) for i in 1:nt], σyxs=[zeros(nz, nx) for i in 1:nt], σyzs=[zeros(nz, nx) for i in 1:nt])
    return merge(f, fs)
  else
    return f
  end
end;

# ╔═╡ 31d742a4-100f-4744-afe5-381b265b6f4c
function reset_fields!(fields)
  fill!(fields.vy, zero(Float64))
  fill!(fields.dvydx, zero(Float64))
  fill!(fields.dvydz, zero(Float64))
  fill!(fields.σyx, zero(Float64))
  fill!(fields.σyz, zero(Float64))
  fill!(fields.dσyxdx, zero(Float64))
  fill!(fields.dσyzdz, zero(Float64))
end;

# ╔═╡ bf09ab3b-0360-4d76-9a45-ac757dc68207
md"""
Similarly, the data to be recorded is also initialized.
"""

# ╔═╡ f4d91971-f806-4c5c-8548-b58a20acfb2c
function initialize_data(grid_param, ageom)
  zeros(length(grid_param.tgrid), length(ageom.xr))
end;

# ╔═╡ 0454ce0a-d6de-427f-bbdc-3bcec21327f2
md"""### Loss Function
Loss function is defined as the L2 norm of the deviation between the observed data and the modelled data and is computed using the following function.
"""

# ╔═╡ f2fb92bb-33d6-4e15-8caf-b245e000ad69
loss = L2DistLoss();

# ╔═╡ 4a4f1300-94ba-4c1b-9d10-9e955d194ff6
function Jdata(dobs, d, loss=loss)
  return mapreduce(+, d, dobs) do d1, d2
    value(loss, d1, d2)
  end
end;

# ╔═╡ 42854ed8-bfa8-46c0-819a-3664c0aa58ad
md"""
Derivative of the loss function acts as the forcing for the adjoint fields where the receivers now act as the sources.
"""

# ╔═╡ ddb37082-cae0-4a68-ab55-19563d8727ed
function get_adj_source(dobs, d)
  adj_source = deriv.(loss, dobs, d)
  reverse!(adj_source, dims=1)
end;

# ╔═╡ bd8b9a0c-6664-4ba8-9795-0a496e932d85
md"""### Gradients
Gradients with respect of ρ and μ⁻¹ are computed according to the expressions derived in the adjoint state notebook.
"""

# ╔═╡ 7d00ecf7-80ba-4eee-99f6-b03f7b1f6e52
# Function to initialize gradient object
function initialize_grad(pa, nt, snap_store=true)
  nz, nx = pa.nz, pa.nx
  f = (; g=zeros(2 * nz * nx))
  if snap_store
    fs = (; ▽ρs=[zeros(nz, nx) for i in 1:nt], ▽μs=[zeros(nz, nx) for i in 1:nt])
    return merge(f, fs)
  else
    return f
  end
end;

# ╔═╡ 5d7d9a8d-0c96-4533-862b-98418b84566b
# Function to reparameterize computed gradients
function update_gx!(gx, g, x, ref=medium_ref_values)
  xρ, xinvμ = chunk(x, 2)
  gρ, ginvμ = chunk(g, 2)
  gxρ, gxinvμ = chunk(gx, 2)
  map!(gxinvμ, ginvμ, xinvμ) do g, m
   invχ(m, ref.invμ0)  * g
  end
  map!(gxρ, gρ, xρ) do g, m
    invχ(m, ref.ρ0) * g
  end
  return x
end;

# ╔═╡ 6e1cb21c-f10a-4dd8-8041-70e7b1fb79a3
# create a function to compute grad_phi and grad_mu 
function reduce_gradients!(grad, x, forwfields, adjfields, pa)

  (; g, ▽ρs, ▽μs) = grad

  fill!(g, 0.0)
  map(▽ρs) do g
    fill!(g, 0.0)
  end
  map(▽μs) do g
    fill!(g, 0.0)
  end
  ▽ρ, ▽μ = chunk(g, 2)
  (; nx, nz, tarray, tgrid, dt, nt) = pa

  # term u[nt]*v[1]
  map!(▽ρ, ▽ρ, adjfields.vys[nt], forwfields.vys[1]) do g, u, v
    g + u * v
  end

  # term τ[nt-1]*σ[1]
	map!(▽μ, ▽μ, adjfields.σyxs[nt-1], adjfields.σyzs[nt-1], forwfields.σyxs[1], forwfields.σyzs[1]) do g, τx, τz, σx, σz
    g + τx * σx + τz * σz
  end
	
  for it = 1:nt-1
    # for gradρ
    map!(▽ρ, ▽ρ, adjfields.vys[it], forwfields.vys[nt-it], forwfields.vys[nt-it+1]) do g, u2, v3, v2
      g + (v2 - v3) * u2
    end
    # @. ▽ρ = ▽ρ * pa.tarray
	(:▽ρs ∈ keys(grad)) && copyto!(grad.▽ρs[it], ▽ρ)

    # for gradμ
	if (it <  nt-1)
    	map!(▽μ, ▽μ, adjfields.σyxs[it], adjfields.σyzs[it], forwfields.σyxs[nt-it], forwfields.σyxs[nt-it-1], forwfields.σyzs[nt-it], forwfields.σyzs[nt-it-1]) do g, τx2, τz2, σx3, σx2, σz3, σz2
      		g + (σx2 - σx3) * τx2 + (σz2 - σz3) * τz2
    	end
    # @. ▽μ = ▽μ * pa.tarray
	    (:▽μs ∈ keys(grad)) && copyto!(grad.▽μs[it], ▽μ)
	end   
  end

  # multiply with dt
  rmul!(g, inv(dt))

  # parameterization
  update_gx!(g, g, x)
end;

# ╔═╡ 61380107-e383-4926-a8d3-ec9e292816c0
md"""
### Finite Difference Functions
All simulation related objects are stored in a single NamedTuple fwi_param. These include grid parameters, medium information and the fields and data.
"""

# ╔═╡ 7b2e2eee-2d22-42e3-bfc5-b145b425dc2a
md"""
Following function takes the parameterized variables ρ/ρ₀ and μ⁻¹/μ⁻¹₀ and updates the medium.
"""

# ╔═╡ ff1ba1f6-f127-4c47-8198-aeff5f051ad9
function update_medium!(medium, x, ref=medium_ref_values)
  xρ, xinvμ = chunk(x, 2)
  map!(medium.μ, xinvμ) do xm
    inv(invχ(xm, ref.invμ0))
  end
  map!(medium.ρ, xρ) do xm
    invχ(xm, ref.ρ0)
  end
  map!(medium.invρ, medium.ρ) do ρ
    inv(ρ)
  end
  return medium
end;

# ╔═╡ 79440e21-3fb9-4f65-8739-a9efea7f6769
md"""
Finite difference of the loss function needs to be computed. For this, we define a generalized loss function J that takes the parameterized medium variable, records the data at the receivers for this updated medium by forward simulation and then calls the loss function to compute the L2 norm of the deviation between observed and modelled data.
"""

# ╔═╡ 209ba8ad-2e04-4b6a-94aa-f06bbb7791ac
md"""
For comparing the derivatives with respect to ρ, we update only the ρ/ρ₀ of the grid cells near the centre while keeping μ⁻¹/μ⁻¹₀ of those cells constant.
"""

# ╔═╡ 489dcf10-b7f2-4544-b80d-3588ff00ff4a
function update_xsρ!(x, xs)
  xρ, xinvμ = chunk(x, 2)
  N = length(xρ)
  N2 = div(N, 2)
  X = view(xρ, N2:N2+length(xs)-1)
  copyto!(X, xs)
  return xs
end;

# ╔═╡ 68d098d3-3148-4d24-9e0c-f6e97a8da496
md"""
For comparing the derivatives with respect to μ⁻¹, we update only the μ⁻¹/μ⁻¹₀ of the grid cells near the centre while keeping ρ/ρ₀ of those cells constant.
"""

# ╔═╡ 02844bc9-9faf-413f-82d2-28d6ba01668d
function update_xsinvμ!(x, xs)
  xρ, xinvμ = chunk(x, 2)
  N = length(xρ)
  N2 = div(N, 2)
  X = view(xinvμ, N2:N2+length(xs)-1)
  copyto!(X, xs)
  return xs
end;

# ╔═╡ b2891506-ac37-4e01-af2b-4ac568b1496a
md"""
Following function extracts the analytically computed gradient values for the cells of interest.
"""

# ╔═╡ 199908d6-f5fd-4461-be53-39919a103835
function get_xs(x, xs)
  xρ, xinvμ = chunk(x, 2)
  N = length(xρ)
  N2 = div(N, 2)
  return vcat(xρ[N2:N2+length(xs)-1],xinvμ[N2:N2+length(xs)-1])
end;

# ╔═╡ c0b95424-d5e5-4ece-99ea-18c05fd0ef56
md"""
### Inversion
Following is the wrapper to the loss function that is minimized during inversion. At each iteration, the forward fields are simulated and the data error is computed.
"""

# ╔═╡ 8a99fcde-20c6-4586-8a62-6c4374897d98
md"Function to compute the gradients at each iteration"

# ╔═╡ f95a08ce-a38d-4b7f-b478-4dbfa607740e
md"### Wavelets"

# ╔═╡ 90953c64-8a87-4065-8c34-d0ead540b728
md"""
Generate a Ricker Wavelet. Reference:
Frequencies of the Ricker wavelet, Yanghua Wang, GEOPHYSICS, VOL. 80, NO. 2.
Its bandwidth is roughly 1.2 * fpeak.

* `fqdom::Float64`: dominant frequency 
* `tgrid`: time-domain grid
* `tpeak::Float64=tgrid[1]+1.5/fqdom`: the peak of the ricker in time (has a default)
"""

# ╔═╡ b993e3e6-8d4e-4de7-aa4b-6a2e3bd12212
function ricker(fqdom,
  tgrid;
  # tpeak is the location of the peak amplitude
  tpeak=tgrid[1] + 1.5 / fqdom, # using approximate half width of ricker
  trim_tol=0.0,
  maxamp=1.0
)
  (tpeak < tgrid[1] + 1.5 / fqdom) && error("cannot output Ricker for given tgrid and tpeak")
  (tpeak > tgrid[end] - 1.5 / fqdom) && error("cannot output Ricker for given tgrid and tpeak")

  isapprox(fqdom, 0.0) && error("dominant frequency cannot be zero")

  # some constants
  pf = (π * π) * (fqdom^2.0)
  nt = length(tgrid)
  δt = step(tgrid)

  # initialize
  wav = zero(tgrid)

  #! ricker wavelet
  for it = 1:nt
    tsquare = (tgrid[it] - tpeak) * (tgrid[it] - tpeak)
    wav[it] = (1.0 - 2.0 * pf * tsquare) * exp(-1.0e0 * pf * tsquare) * maxamp
  end

  isapprox(maximum(abs.(wav)), 0.0) && warn("wavelet is zeros")
  return wav
end;

# ╔═╡ a62839d5-837b-4c37-996f-33659c34911c
md"""### UI
Function to choose the number of sources and receivers
"""

# ╔═╡ 2ea24e92-d66e-4c60-ad0b-f671d894fef2
function src_rec_ip()
  return PlutoUI.combine() do Child
    src = [md"""Number of sources = $(Child("ns", Slider(range(start=1,stop=10,step=1), default=1, show_value=true)))
    """,]

    rec = [md"""Number of receivers = $(Child("nr", Slider(range(start=5, stop=15, step=1), default=10, show_value=true)))
    """,]

    md"""
    $(src)
    $(rec)
    """
  end
end;

# ╔═╡ 86ed93a1-c7b9-4b3a-8cb5-ca4405cff3df
@bind acq src_rec_ip()

# ╔═╡ 7f797571-055e-4975-9c26-fc968bbc0094
md"""
Function to choose the parameters of the true medium. Z-location of the reflector as the well as the density and bulk modulus of the medium below the reflector can be chosen.
"""

# ╔═╡ d7b37c59-e0b3-4e47-86d3-7f1df7400f09
function choose_param_truemed()
	return PlutoUI.combine() do Child
		zloc = [md"""Z location (km) = $(Child("z", Slider(range(start=15,stop=40), default=20, show_value=true)))
    """,]

		dens = [md"""Density (g/cc) = $(Child("ρ", Slider(range(start=4, stop=6, step=0.1), default=5, show_value=true)))
    """,]

		bmod = [md"""Bulk Modulus (GPa) = $(Child("μ", Slider(range(start=70, stop=150, step=2), default=82, show_value=true)))
    """,]

		md"""
		$(zloc)
		$(dens)
		$(bmod)
		"""
	end
end;

# ╔═╡ 65efba3b-16b0-4113-a59e-809365e7bdd6
@bind param_true_med choose_param_truemed()

# ╔═╡ 2afbe8bf-6c6d-473d-980b-f455ab2189d2
#=╠═╡
begin
	# Compute the rough wavelengths of the true medium by defining dummy spatial grids
	dum_zgrid = range(0, stop=40, length=107)
	dum_xgrid = range(-40, stop=40, length=221)
	dum_μtrue = ones(107, 221) .* medium_ref_values.μ0
  	dum_ρtrue = ones(107, 221) .* medium_ref_values.ρ0
  	dum_reflect_index = findall(dum_zgrid .>= param_true_med.z)[1]
  	dum_ρtrue[dum_reflect_index:end, :] .= param_true_med.ρ * 10^-3 * 10^15  # density in kgkm⁻³
  	dum_μtrue[dum_reflect_index:end, :] .= param_true_med.μ * 10^9 * 10^3 # bulk modulus in kgkm⁻¹s⁻²
  	dum_medium_true = bundle_medium(dum_μtrue, dum_ρtrue)
	true_medium_lambda = get_vs(mean,dum_medium_true)/source_fpeak

	# Calculate the number of xgrid and zgrid points such that each grid cell is at least 1/6th of the wavelength of true medium
	npx = DSP.nextfastfft(80/(true_medium_lambda/6)); npz = DSP.nextfastfft(40/(true_medium_lambda/6))
	
	if iseven(npx)
		npoints_x = npx+1
	else
		npoints_x = npx
	end

	if iseven(npz)
		npoints_z = npz+1
	else
		npoints_z = npz
	end
end;
  ╠═╡ =#

# ╔═╡ 7928a88c-f217-4338-a6a5-50ab2d422480
#=╠═╡
begin
  # domain extends
  zgrid = range(0, stop=40, length=npoints_z)
  xgrid = range(-40, stop=40, length=npoints_x)

  # Numerics
  nx, nz = length(xgrid), length(zgrid)

  # Derived numerics
  dx, dz = step(xgrid), step(zgrid) # cell sizes
end;
  ╠═╡ =#

# ╔═╡ 1c67cda8-7712-4d5b-a2aa-af47f290f745
#=╠═╡
begin
  μtrue = ones(nz, nx) .* medium_ref_values.μ0
  ρtrue = ones(nz, nx) .* medium_ref_values.ρ0
  reflect_index = findall(zgrid .>= param_true_med.z)[1]
  ρtrue[reflect_index:end, :] .= param_true_med.ρ * 10^-3 * 10^15  # density in kgkm⁻³
  μtrue[reflect_index:end, :] .= param_true_med.μ * 10^9 * 10^3 # shear modulus in kgkm⁻¹s⁻²
  medium_true = bundle_medium(μtrue, ρtrue)
end;
  ╠═╡ =#

# ╔═╡ 1a33a93e-c2e5-4e1b-96d7-929ecf470d03
#=╠═╡
ageom = get_ageom(xgrid, zgrid, acq.ns, acq.nr);
  ╠═╡ =#

# ╔═╡ e7e72f61-d79e-4a82-ad9c-129191c8a8c2
#=╠═╡
adj_ageom = get_adj_ageom(ageom);
  ╠═╡ =#

# ╔═╡ 6a8139c4-12c1-4d18-bd1e-14334290aec1
#=╠═╡
begin
	courant_number = 0.2

	# lets calculate the min distance from the center to the edge of the domain
	r = min(xgrid[end] - xgrid[1], zgrid[end] - zgrid[1]) * 0.5

	# choose time stepping dt to satisfy Courant condition
    dt = courant_number * step(xgrid) * inv(get_vs(minimum, medium_true))
    nt = Int(floor(r / (mean(sqrt.(medium_true.μ ./ medium_true.ρ)) * dt))) * 2
    tgrid = range(0, length=nt, step=dt)
end;
  ╠═╡ =#

# ╔═╡ 17dd3d57-d5ca-443c-b003-b3a97b963d57
#=╠═╡
begin
	# Generating the source wavelet
	source_wavelet = ricker(source_fpeak, tgrid, maxamp=1e15)
	# Repeating it for each chosen source
	source = repeat(source_wavelet, 1, ageom.ns)
end;
  ╠═╡ =#

# ╔═╡ d812711d-d02f-44bb-9e73-accd1623dea1
#=╠═╡
plot(tgrid, source_wavelet, Layout(width=700, height=350, title="Source Wavelet"))
  ╠═╡ =#

# ╔═╡ 92d05447-6d0e-4ee0-a330-244b9c65c871
#=╠═╡
@bind t_forw Slider(1:length(tgrid)-1, show_value=true)
  ╠═╡ =#

# ╔═╡ 8b3776bd-509b-4232-9737-36c9ae003350
#=╠═╡
begin
  # Unperturbed medium
  μref = ones(nz, nx) * medium_ref_values.μ0  # shear modulus in kgkm⁻¹s⁻²
  ρref = ones(nz, nx) * medium_ref_values.ρ0  # density in kgkm⁻³
  medium_ref = bundle_medium(μref, ρref)
end;
  ╠═╡ =#

# ╔═╡ aa19e992-2735-4324-8fd7-15eacadf0faa
#=╠═╡
begin
  Fz = plan_rfft(zeros(nz, nx), (1))
  Fx = plan_rfft(zeros(nz, nx), (2))
  kx = reshape(collect(rfftfreq(nx, inv(step(xgrid)))), 1, :) * 2 * pi
  kz = reshape(collect(rfftfreq(nz, inv(step(zgrid)))), :, 1) * 2 * pi
  storagex = zero(Fx * zeros(nz, nx))
  storagez = zero(Fz * zeros(nz, nx))
  fp = (; Fx, Fz, kx, kz, storagex, storagez)
  function Dx!(dPdx, P, fp)
    mul!(fp.storagex, fp.Fx, P)
    broadcast!(*, fp.storagex, fp.storagex, fp.kx)
    rmul!(fp.storagex, im)
    ldiv!(dPdx, fp.Fx, fp.storagex)
  end
  Dx!(dP, P) = Dx!(dP, P, fp)
  Dx(P) = (dPdx = zero(P); Dx!(dPdx, P, fp); dPdx)
  function Dz!(dPdz, P, fp)
    mul!(fp.storagez, fp.Fz, P)
    broadcast!(*, fp.storagez, fp.storagez, fp.kz)
    rmul!(fp.storagez, im)
    ldiv!(dPdz, fp.Fz, fp.storagez)
  end
  Dz!(dP, P) = Dz!(dP, P, fp)
  Dz(P) = (dPdz = zero(P); Dz!(dPdz, P, fp); dPdz)
  nothing
end
  ╠═╡ =#

# ╔═╡ e2127d9b-f2a4-4970-a36e-5fa70c304ca7
#=╠═╡
# test transpose of Dx
begin
  x1 = rand(nz, nx)
  y1 = rand(nz, nx)
  dot(Dx(x1), y1), dot(x1, -Dx(y1))
end
  ╠═╡ =#

# ╔═╡ ebab6005-2ad6-4057-9275-bf7d53d41b0b
#=╠═╡
begin
	# Extent of tapering for the absorbing boundaries
	taper_points = floor(Int, 2*true_medium_lambda/dz)

	#NamedTuple for grid-related parameters
	grid_param = (; xgrid, zgrid, tgrid, dt=step(tgrid), nt=length(tgrid), nx=length(xgrid), nz=length(zgrid), tarray=get_taper_array(nx, nz, np=taper_points, tapfact=0.1))
end;
  ╠═╡ =#

# ╔═╡ c34b1a5d-5078-4b8f-94d1-a088cbe5ab3e
#=╠═╡
plot(heatmap(x=xgrid, y=zgrid, z=(grid_param.tarray)))
  ╠═╡ =#

# ╔═╡ 15bbf544-34bd-4d38-bac5-0f43b1305df3
#=╠═╡
function propagate!(data, fields, pa, medium, ageom, source)

	# source spray and receiver projection matrix
	Rs=get_projection_matrix(ageom.xs, ageom.zs, grid_param.xgrid, grid_param.zgrid, transpose_flag=false, m=medium.invρ)
	Rr=get_projection_matrix(ageom.xr, ageom.zr, grid_param.xgrid, grid_param.zgrid, transpose_flag=true)

    reset_fields!(fields)

    (; vy, dvydx, dvydz, σyx, σyz, dσyxdx, dσyzdz) = fields
    (; nx, nz, tarray, tgrid, dt, nt) = pa

    (; μ, ρ, invρ) = medium

    # time loop
    # @progress 
	for it = 1:nt
		# ============= update vy ================
        Dx!(dσyxdx, σyx)
        Dz!(dσyzdz, σyz)

        @. vy = vy + invρ * (dσyxdx + dσyzdz) * dt

		# ============== body force ==============
		# need to view vy as a vector for source/recording operations
        vyv = view(vy, :)
        f = view(source, it, :)
	    mul!(vyv, Rs, f, dt, 1.0)

		# ============= update σ ================
        Dx!(dvydx, vy)
        Dz!(dvydz, vy)

        @. σyx = σyx + μ * dvydx * dt
        @. σyx = σyx * pa.tarray
        @. σyz = σyz + μ * dvydz * dt
        @. σyz = σyz * pa.tarray


        # ============= record fields ===========
        d = view(data, it, :)
        mul!(d, Rr, vyv)

        (:vys ∈ keys(fields)) && copyto!(fields.vys[it], vy)
        (:σyxs ∈ keys(fields)) && copyto!(fields.σyxs[it], σyx)
        (:σyzs ∈ keys(fields)) && copyto!(fields.σyzs[it], σyz)

    end

    return nothing
end;
  ╠═╡ =#

# ╔═╡ 77c9696c-58c5-40bf-acd0-16d5cf877810
#=╠═╡
begin
	# Initialisation of fields and data
	fields_true = initialize_fields(grid_param, grid_param.nt)
	dobs = initialize_data(grid_param, ageom)

	# Running the simulation to generate observed data
	@time propagate!(dobs, fields_true, grid_param, medium_true, ageom, source)	
end;
  ╠═╡ =#

# ╔═╡ 3be62716-f2d9-434c-a69a-ed272b89c85d
#=╠═╡
begin
	# Initialisation of fields and data
	fields_forw = initialize_fields(grid_param, grid_param.nt, snap_store=true)
	dref = initialize_data(grid_param, ageom)

	# Simulation to compute wavefields
	propagate!(dref, fields_forw, grid_param, medium_ref, ageom, source)
end;
  ╠═╡ =#

# ╔═╡ ee679ef2-3cf8-4b3d-a717-ae2d088b5fe8
#=╠═╡
adj_source = get_adj_source(dobs, dref);
  ╠═╡ =#

# ╔═╡ 3f5f9d8a-3647-4a16-89ba-bd7a31c01064
#=╠═╡
begin
	# Initialisation of fields and data
	fields_adj = initialize_fields(grid_param, nt, snap_store=true)
	dadj = initialize_data(grid_param, adj_ageom)

	# Simulating the adjoint field
	propagate!(dadj, fields_adj, grid_param, medium_ref, adj_ageom, adj_source)
end;
  ╠═╡ =#

# ╔═╡ 6f9cacdb-ef82-4085-8030-23703f06ccbc
#=╠═╡
begin
	# Reparameterization of ρ and μ⁻¹ to ρ/ρ₀ and μ⁻¹/μ⁻¹₀
	x0 = get_x(medium_ref)
	# Initialisation of grad
	gradient = initialize_grad(grid_param, grid_param.nt)
	# Simulation to compute grad 
	reduce_gradients!(gradient, x0, fields_forw, fields_adj, grid_param)
end;
  ╠═╡ =#

# ╔═╡ a42d3b46-ae60-41d1-8b2d-e85af895ec14
#=╠═╡
fwi_param = (; fields_forw = initialize_fields(grid_param, nt, snap_store=true), fields_adj = initialize_fields(grid_param, nt, snap_store=true), medium=deepcopy(medium_ref), dref, ageom, adj_ageom, source, adj_source, dobs, grid_param, xbuffer=get_x(medium_ref));
  ╠═╡ =#

# ╔═╡ a24bfc41-8e50-4a68-b5cf-3973f4003221
#=╠═╡
function J(x; fwi_param=fwi_param)

	(; dref, fields_forw, grid_param, medium, ageom, source) = fwi_param
	update_medium!(medium, x)
	propagate!(dref, fields_forw, grid_param, medium, ageom, source)

	return Jdata(dref, dobs)
end;
  ╠═╡ =#

# ╔═╡ 008b99f2-c9f3-4d30-a234-393e1ed69840
#=╠═╡
function Jsρ(xs; fwi_param=fwi_param)
	# Function to check gradients wrt ρ
	update_xsρ!(fwi_param.xbuffer, xs)
	return J(fwi_param.xbuffer, fwi_param=fwi_param)
end;
  ╠═╡ =#

# ╔═╡ 9d319561-38c9-46c8-aaf6-06d0a41ed0bf
#=╠═╡
function Jsinvμ(xs; fwi_param=fwi_param)
	# Function to check gradients wrt ρ
	update_xsinvμ!(fwi_param.xbuffer, xs)
	return J(fwi_param.xbuffer, fwi_param=fwi_param)
end;
  ╠═╡ =#

# ╔═╡ 40bcf5e3-4427-482c-9054-622f5625146f
#=╠═╡
begin
	xs = zeros(3) # Cells to be replaced
	#========= Gradients with respect to ρ/ρ₀ =========#
	g1ρ=grad(central_fdm(2, 1), Jsρ, xs) # Gradients using central difference
	g2ρ=get_xs(gradient.g, xs)[1:length(xs)] # Gradients computed analytically

	#========= Gradients with respect to μ⁻¹/μ⁻¹₀ =========#
	g1invμ=grad(central_fdm(2, 1), Jsinvμ, xs) # Gradients using central difference
	g2invμ=get_xs(gradient.g, xs)[length(xs)+1:end] # Gradients computed analytically
end;
  ╠═╡ =#

# ╔═╡ b525408f-0d7d-4333-a789-def42565520c
#=╠═╡
g1ρ[1] ./ g2ρ
  ╠═╡ =#

# ╔═╡ 99541b49-caf2-40ab-b299-081111e35675
#=╠═╡
g1invμ[1] ./ g2invμ
  ╠═╡ =#

# ╔═╡ 66f3fda7-bd78-4fc8-9ecd-a2c0db3c36af
#=╠═╡
function Jinv(x; fwi_param=fwi_param)
	(; grid_param, ageom, source) = fwi_param
	
	# Update medium
	ρ = ones(nz,nx)*medium_ref_values.ρ0
	μ = ones(nz,nx)*medium_ref_values.μ0
	medium = bundle_medium(μ,ρ)
	update_medium!(medium, x)

	# Simulate forward fields
	fields_forw = initialize_fields(grid_param, grid_param.nt, snap_store=true)
	dref = initialize_data(grid_param, ageom)
	propagate!(dref, fields_forw, grid_param, medium, ageom, source)

	# Compute loss function
	return Jdata(dref, dobs)
end;
  ╠═╡ =#

# ╔═╡ e0c74f26-c863-464a-a37e-526ffbaeed03
#=╠═╡
function grad_fn!(g, x; fwi_param=fwi_param)
	(; grid_param, ageom, source) = fwi_param
	
	# Update medium 
	ρ = ones(nz,nx)*medium_ref_values.ρ0
	μ = ones(nz,nx)*medium_ref_values.μ0
	medium = bundle_medium(μ,ρ)
	update_medium!(medium, x)

	# Simulate forward fields
	fields_forw = initialize_fields(grid_param, grid_param.nt, snap_store=true)
	dref = initialize_data(grid_param, ageom)
	propagate!(dref, fields_forw, grid_param, medium, ageom, source)
	update_medium!(medium, x)

	# Simulate adjoint fields
	adj_ageom = get_adj_ageom(ageom)
	adj_source = get_adj_source(dobs, dref)
	fields_adj = initialize_fields(grid_param, nt, snap_store=true)
	dadj = initialize_data(grid_param, adj_ageom)
	propagate!(dadj, fields_adj, grid_param, medium, adj_ageom, adj_source)

	# Compute gradient
	x0 = get_x(medium)
	gradient = initialize_grad(grid_param, grid_param.nt)
	reduce_gradients!(gradient, x0, fields_forw, fields_adj, grid_param)
	g .= gradient.g
end;
  ╠═╡ =#

# ╔═╡ 637bad58-4388-47ba-85af-a43806238bd6
#=╠═╡
res = optimize(Jinv,grad_fn!,x0,GradientDescent(;linesearch = LineSearches.MoreThuente()),Optim.Options(iterations=10,extended_trace=true,store_trace=true))
  ╠═╡ =#

# ╔═╡ 98721f55-81bf-45d6-b319-f8e48538589d
#=╠═╡
begin
	ρinvsol = reshape(invχ.(res.minimizer[1:nz*nx],medium_ref_values.ρ0),nz,nx)
	μinvsol = reshape(inv.(invχ.(res.minimizer[nz*nx+1:end],medium_ref_values.invμ0)),nz,nx)
	medium_inv = bundle_medium(μinvsol,ρinvsol)
end;
  ╠═╡ =#

# ╔═╡ fbe44944-499a-4881-94b6-07855d1165aa
md"""
### Plots
Function to clip the parameters at the absorbing boundaries.
"""

# ╔═╡ b7f4078a-ead0-4d42-8b44-4f471eefc6fc
function clip_edges(m, grid_param)
  (; xgrid, zgrid) = grid_param
  I = findall(x -> isequal(x, 1), grid_param.tarray)
  xs = extrema(unique(getindex.(I, 2)))
  zs = extrema(unique(getindex.(I, 1)))
  return xgrid[range(xs...)], zgrid[range(zs...)], m[range(zs...), range(xs...)]
end;

# ╔═╡ 7e80aeb0-1f63-4303-b374-bf2acee5c54d
md"Function to add the source and receivers to the plot"

# ╔═╡ a72184ba-f642-4bed-8a31-c70d5fdb88e2
function add_ageom!(fig, ageom, row, col)
  if (!(ageom === nothing))
    add_trace!(fig, scatter(
        x=ageom.xr,
        y=ageom.zr, mode="markers",
        marker_color="black", marker_symbol="triangle-down", showlegend=false), row=row, col=col)
    add_trace!(fig, scatter(
        x=ageom.xs,
        y=ageom.zs, mode="markers",
        marker_color="black", marker_size=10, marker_symbol="star", showlegend=false), row=row, col=col)
  end
end;

# ╔═╡ a055de92-9eba-4ca8-a579-f00bfa855e4a
md"Function to plot the wavefield after clipping the edges."

# ╔═╡ f1b9f4a0-5554-48fd-9268-4d7b03d74688
function fieldheat(fields, titles, grid_param, ageom=nothing)

  @assert length(fields) == length(titles) == 4
  fig = Plot(Layout(yaxis_autorange="reversed", title=attr(font_size=12,), font=attr(
      size=10), yaxis=attr(scaleanchor="x", scaleratio=1), Subplots(shared_xaxes=true, shared_yaxes=true, horizontal_spacing=0.04, vertical_spacing=0.04, rows=div(length(fields) - 1, 2) + 1, cols=2, subplot_titles=titles)))
  i = 0
  for f in fields
    i = i + 1
    ic = 2 - mod(i, 2)
    ir = div(i - 1, 2) + 1
    x, y, z = clip_edges(f, grid_param)
    dmax = maximum(abs, f)
    add_trace!(fig, heatmap(
        xmin=-30, xmax=30,
        x=x,
        y=y,
        z=z, zmin=-dmax,
        zmax=dmax, colorscale="seismic", showscale=false), row=ir, col=ic)
    add_ageom!(fig, ageom, ir, ic)
  end
  return PlutoPlotly.plot(fig)
end;

# ╔═╡ 77e134d8-bd8b-4303-8c44-a4920cf0ee81
#=╠═╡
let t=t_forw
fieldheat([fields_forw.vys[t], fields_adj.vys[nt-t], gradient.▽ρs[t], gradient.▽μs[t]], 
	["Forward Field" "Adjoint Field" "Gradient w.r.t. ρ" "Gradient w.r.t. μ"], 
	grid_param, ageom)
end
  ╠═╡ =#

# ╔═╡ 12abff88-f713-4211-9191-4741a41c07d2
md"Function to plot the medium parameters"

# ╔═╡ 99ba8f6a-551a-432b-abb1-a79be233fa46
#=╠═╡
function mediumheat(medium, ageom=nothing)
 	(; μ, ρ) = medium
	c = get_vs(medium)

    fig = Plot(Layout(yaxis_autorange="reversed", height=300, width=650, title=attr(font_size=12,), font=attr(
            size=10), yaxis=attr(scaleanchor="x"), Subplots(shared_xaxes=true, shared_yaxes=true, horizontal_spacing=0.3, rows=1, cols=2, subplot_titles=["Velocity (km/s)" "Density (g/cc)"])))
    add_trace!(fig, heatmap(
            x=xgrid,
            y=zgrid,
            z=c, colorscale="Portland", colorbar_x=0.35), row=1, col=1)


    add_trace!(fig, heatmap(
            x=xgrid,
            y=zgrid,
            z=ρ * 1e-12, colorscale="Portland", colorbar_x=1.0), row=1, col=2)
	if(!(ageom===nothing))
		for ic in 1:2
			add_ageom!(fig, ageom, 1, ic)
		end
	end

    return PlutoPlotly.plot(fig)
end;
  ╠═╡ =#

# ╔═╡ 55c7f981-96a7-40e9-811f-37334622565b
#=╠═╡
mediumheat(medium_true, ageom)
  ╠═╡ =#

# ╔═╡ f26f1b1a-18e0-413c-86a9-351ba5dfaebf
#=╠═╡
mediumheat(medium_ref, ageom)
  ╠═╡ =#

# ╔═╡ 1521a09f-a954-4ba5-a755-0e8d24008002
#=╠═╡
mediumheat(medium_inv, ageom)
  ╠═╡ =#

# ╔═╡ 3b7618e1-f561-445e-b3b1-697e564ee4f3
md"Function to plot data"

# ╔═╡ 54986cc5-2ea0-4097-bbe0-1ed174ec9ae4
function dataheat(d, tgrid; title="Data")
  data = d
  dmax = maximum(abs, data)
  trace = heatmap(
    z=data,
    x=1:size(data, 2),
    y=tgrid,
    colorscale="RdBu",
    reversescale=true,
    zmin=-dmax,
    zmax=dmax,
  )
  layout = Layout(title=title, width=300, height=450, xaxis_range=[0, size(data, 2) + 1], yaxis_scaleanchor="x", yaxis_scaleratio=2.5, yaxis_autorange="reversed",
    xaxis_title="Receiver #",
    yaxis_title="Time (s)",)
  return plot(trace, layout)
end;

# ╔═╡ 4171af00-1d14-45ba-9fd3-a2c30d0b759f
#=╠═╡
dataheat(dobs, tgrid, title="Observed Data")
  ╠═╡ =#

# ╔═╡ 438da68f-f23e-4712-9dd6-0dd030ad8656
#=╠═╡
dataheat(dref, tgrid, title="Modelled Data")
  ╠═╡ =#

# ╔═╡ 270e5d4a-c666-43e7-8c64-02b9fed977e4
#=╠═╡
dataheat(adj_source, tgrid, title="Data Error")
  ╠═╡ =#

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
DSP = "717857b8-e6f2-59f4-9121-6e50c889abd2"
FFTW = "7a1cc6ca-52ef-59f5-83cd-3a7055c09341"
FiniteDifferences = "26cc04aa-876d-5657-8c51-4c34ba976000"
ForwardDiff = "f6369f11-7733-5829-9624-2563aa707210"
LaTeXStrings = "b964fa9f-0449-5b57-a5c2-d3ea65f4040f"
LineSearches = "d3d80556-e9d4-5f37-9878-2ab0fcc64255"
LinearAlgebra = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"
LossFunctions = "30fc2ffe-d236-52d8-8643-a9d8f7c094a7"
MLUtils = "f1d291b0-491e-4a28-83b9-f70985020b54"
Optim = "429524aa-4258-5aef-a3af-852621145aeb"
PlutoPlotly = "8e989ff0-3d88-8e9f-f020-2b208a939ff0"
PlutoUI = "7f904dfe-b85e-4ff6-b463-dae2292396a8"
ProgressLogging = "33c8b6b6-d38a-422a-b730-caa89a2f386c"
SparseArrays = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"
Statistics = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"

[compat]
DSP = "~0.7.8"
FFTW = "~1.6.0"
FiniteDifferences = "~0.12.26"
ForwardDiff = "~0.10.35"
LaTeXStrings = "~1.3.0"
LineSearches = "~7.2.0"
LossFunctions = "~0.9.0"
MLUtils = "~0.4.1"
Optim = "~1.7.5"
PlutoPlotly = "~0.3.6"
PlutoUI = "~0.7.50"
ProgressLogging = "~0.1.4"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.7.3"
manifest_format = "2.0"

[[deps.AbstractFFTs]]
deps = ["ChainRulesCore", "LinearAlgebra"]
git-tree-sha1 = "16b6dbc4cf7caee4e1e75c49485ec67b667098a0"
uuid = "621f4979-c628-5d54-868e-fcf4e3e8185c"
version = "1.3.1"

[[deps.AbstractPlutoDingetjes]]
deps = ["Pkg"]
git-tree-sha1 = "8eaf9f1b4921132a4cff3f36a1d9ba923b14a481"
uuid = "6e696c72-6542-2067-7265-42206c756150"
version = "1.1.4"

[[deps.Accessors]]
deps = ["Compat", "CompositionsBase", "ConstructionBase", "Dates", "InverseFunctions", "LinearAlgebra", "MacroTools", "Requires", "StaticArrays", "Test"]
git-tree-sha1 = "c7dddee3f32ceac12abd9a21cd0c4cb489f230d2"
uuid = "7d9f7c33-5ae7-4f3b-8dc6-eff91059b697"
version = "0.1.29"

[[deps.Adapt]]
deps = ["LinearAlgebra", "Requires"]
git-tree-sha1 = "cc37d689f599e8df4f464b2fa3870ff7db7492ef"
uuid = "79e6a3ab-5dfb-504d-930d-738a2a938a0e"
version = "3.6.1"

[[deps.ArgCheck]]
git-tree-sha1 = "a3a402a35a2f7e0b87828ccabbd5ebfbebe356b4"
uuid = "dce04be8-c92d-5529-be00-80e4d2c0e197"
version = "2.3.0"

[[deps.ArgTools]]
uuid = "0dad84c5-d112-42e6-8d28-ef12dabb789f"

[[deps.ArrayInterface]]
deps = ["Adapt", "LinearAlgebra", "Requires", "SnoopPrecompile", "SparseArrays", "SuiteSparse"]
git-tree-sha1 = "38911c7737e123b28182d89027f4216cfc8a9da7"
uuid = "4fba245c-0d91-5ea0-9b3e-6abc04ee57a9"
version = "7.4.3"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[deps.Atomix]]
deps = ["UnsafeAtomics"]
git-tree-sha1 = "c06a868224ecba914baa6942988e2f2aade419be"
uuid = "a9b6321e-bd34-4604-b9c9-b65b8de01458"
version = "0.1.0"

[[deps.BangBang]]
deps = ["Compat", "ConstructionBase", "Future", "InitialValues", "LinearAlgebra", "Requires", "Setfield", "Tables", "ZygoteRules"]
git-tree-sha1 = "7fe6d92c4f281cf4ca6f2fba0ce7b299742da7ca"
uuid = "198e06fe-97b7-11e9-32a5-e1d131e6ad66"
version = "0.3.37"

[[deps.Base64]]
uuid = "2a0f44e3-6c83-55bd-87e4-b1978d98bd5f"

[[deps.Baselet]]
git-tree-sha1 = "aebf55e6d7795e02ca500a689d326ac979aaf89e"
uuid = "9718e550-a3fa-408a-8086-8db961cd8217"
version = "0.1.1"

[[deps.CEnum]]
git-tree-sha1 = "eb4cb44a499229b3b8426dcfb5dd85333951ff90"
uuid = "fa961155-64e5-5f13-b03f-caf6b980ea82"
version = "0.4.2"

[[deps.CategoricalArrays]]
deps = ["DataAPI", "Future", "Missings", "Printf", "Requires", "Statistics", "Unicode"]
git-tree-sha1 = "5084cc1a28976dd1642c9f337b28a3cb03e0f7d2"
uuid = "324d7699-5711-5eae-9e2f-1d82baa6b597"
version = "0.10.7"

[[deps.ChainRulesCore]]
deps = ["Compat", "LinearAlgebra", "SparseArrays"]
git-tree-sha1 = "c6d890a52d2c4d55d326439580c3b8d0875a77d9"
uuid = "d360d2e6-b24c-11e9-a2a3-2a2ae2dbcce4"
version = "1.15.7"

[[deps.ChangesOfVariables]]
deps = ["ChainRulesCore", "LinearAlgebra", "Test"]
git-tree-sha1 = "485193efd2176b88e6622a39a246f8c5b600e74e"
uuid = "9e997f8a-9a97-42d5-a9f1-ce6bfc15e2c0"
version = "0.1.6"

[[deps.ColorSchemes]]
deps = ["ColorTypes", "ColorVectorSpace", "Colors", "FixedPointNumbers", "PrecompileTools", "Random"]
git-tree-sha1 = "be6ab11021cd29f0344d5c4357b163af05a48cba"
uuid = "35d6a980-a343-548e-a6ea-1d62b119f2f4"
version = "3.21.0"

[[deps.ColorTypes]]
deps = ["FixedPointNumbers", "Random"]
git-tree-sha1 = "eb7f0f8307f71fac7c606984ea5fb2817275d6e4"
uuid = "3da002f7-5984-5a60-b8a6-cbb66c0b333f"
version = "0.11.4"

[[deps.ColorVectorSpace]]
deps = ["ColorTypes", "FixedPointNumbers", "LinearAlgebra", "SpecialFunctions", "Statistics", "TensorCore"]
git-tree-sha1 = "600cc5508d66b78aae350f7accdb58763ac18589"
uuid = "c3611d14-8923-5661-9e6a-0046d554d3a4"
version = "0.9.10"

[[deps.Colors]]
deps = ["ColorTypes", "FixedPointNumbers", "Reexport"]
git-tree-sha1 = "fc08e5930ee9a4e03f84bfb5211cb54e7769758a"
uuid = "5ae59095-9a9b-59fe-a467-6f913c188581"
version = "0.12.10"

[[deps.CommonSubexpressions]]
deps = ["MacroTools", "Test"]
git-tree-sha1 = "7b8a93dba8af7e3b42fecabf646260105ac373f7"
uuid = "bbf7d656-a473-5ed7-a52c-81e309532950"
version = "0.3.0"

[[deps.Compat]]
deps = ["Dates", "LinearAlgebra", "UUIDs"]
git-tree-sha1 = "7a60c856b9fa189eb34f5f8a6f6b5529b7942957"
uuid = "34da2185-b29b-5c13-b0c7-acf172513d20"
version = "4.6.1"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"

[[deps.CompositionsBase]]
git-tree-sha1 = "455419f7e328a1a2493cabc6428d79e951349769"
uuid = "a33af91c-f02d-484b-be07-31d278c5ca2b"
version = "0.1.1"

[[deps.ConstructionBase]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "89a9db8d28102b094992472d333674bd1a83ce2a"
uuid = "187b0558-2788-49d3-abe0-74a17ed4e7c9"
version = "1.5.1"

[[deps.ContextVariablesX]]
deps = ["Compat", "Logging", "UUIDs"]
git-tree-sha1 = "25cc3803f1030ab855e383129dcd3dc294e322cc"
uuid = "6add18c4-b38d-439d-96f6-d6bc489c04c5"
version = "0.1.3"

[[deps.DSP]]
deps = ["Compat", "FFTW", "IterTools", "LinearAlgebra", "Polynomials", "Random", "Reexport", "SpecialFunctions", "Statistics"]
git-tree-sha1 = "da8b06f89fce9996443010ef92572b193f8dca1f"
uuid = "717857b8-e6f2-59f4-9121-6e50c889abd2"
version = "0.7.8"

[[deps.DataAPI]]
git-tree-sha1 = "e8119c1a33d267e16108be441a287a6981ba1630"
uuid = "9a962f9c-6df0-11e9-0e5d-c546b8b5ee8a"
version = "1.14.0"

[[deps.DataStructures]]
deps = ["Compat", "InteractiveUtils", "OrderedCollections"]
git-tree-sha1 = "d1fff3a548102f48987a52a2e0d114fa97d730f0"
uuid = "864edb3b-99cc-5e75-8d2d-829cb0a9cfe8"
version = "0.18.13"

[[deps.DataValueInterfaces]]
git-tree-sha1 = "bfc1187b79289637fa0ef6d4436ebdfe6905cbd6"
uuid = "e2d170a0-9d28-54be-80f0-106bbe20a464"
version = "1.0.0"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"

[[deps.DefineSingletons]]
git-tree-sha1 = "0fba8b706d0178b4dc7fd44a96a92382c9065c2c"
uuid = "244e2a9f-e319-4986-a169-4d1fe445cd52"
version = "0.1.2"

[[deps.DelimitedFiles]]
deps = ["Mmap"]
uuid = "8bb1440f-4735-579b-a4ab-409b98df4dab"

[[deps.DiffResults]]
deps = ["StaticArraysCore"]
git-tree-sha1 = "782dd5f4561f5d267313f23853baaaa4c52ea621"
uuid = "163ba53b-c6d8-5494-b064-1a9d43ac40c5"
version = "1.1.0"

[[deps.DiffRules]]
deps = ["IrrationalConstants", "LogExpFunctions", "NaNMath", "Random", "SpecialFunctions"]
git-tree-sha1 = "a4ad7ef19d2cdc2eff57abbbe68032b1cd0bd8f8"
uuid = "b552c78f-8df3-52c6-915a-8e097449b14b"
version = "1.13.0"

[[deps.Distributed]]
deps = ["Random", "Serialization", "Sockets"]
uuid = "8ba89e20-285c-5b6f-9357-94700520ee1b"

[[deps.DocStringExtensions]]
deps = ["LibGit2"]
git-tree-sha1 = "2fb1e02f2b635d0845df5d7c167fec4dd739b00d"
uuid = "ffbed154-4ef7-542d-bbb7-c09d3a79fcae"
version = "0.9.3"

[[deps.Downloads]]
deps = ["ArgTools", "FileWatching", "LibCURL", "NetworkOptions"]
uuid = "f43a241f-c20a-4ad4-852c-f6b1247861c6"

[[deps.FFTW]]
deps = ["AbstractFFTs", "FFTW_jll", "LinearAlgebra", "MKL_jll", "Preferences", "Reexport"]
git-tree-sha1 = "f9818144ce7c8c41edf5c4c179c684d92aa4d9fe"
uuid = "7a1cc6ca-52ef-59f5-83cd-3a7055c09341"
version = "1.6.0"

[[deps.FFTW_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "c6033cc3892d0ef5bb9cd29b7f2f0331ea5184ea"
uuid = "f5851436-0d7a-5f13-b9de-f02708fd171a"
version = "3.3.10+0"

[[deps.FLoops]]
deps = ["BangBang", "Compat", "FLoopsBase", "InitialValues", "JuliaVariables", "MLStyle", "Serialization", "Setfield", "Transducers"]
git-tree-sha1 = "ffb97765602e3cbe59a0589d237bf07f245a8576"
uuid = "cc61a311-1640-44b5-9fba-1b764f453329"
version = "0.2.1"

[[deps.FLoopsBase]]
deps = ["ContextVariablesX"]
git-tree-sha1 = "656f7a6859be8673bf1f35da5670246b923964f7"
uuid = "b9860ae5-e623-471e-878b-f6a53c775ea6"
version = "0.1.1"

[[deps.FileWatching]]
uuid = "7b1f6079-737a-58dc-b8bc-7a2ca5c1b5ee"

[[deps.FillArrays]]
deps = ["LinearAlgebra", "Random", "SparseArrays", "Statistics"]
git-tree-sha1 = "fc86b4fd3eff76c3ce4f5e96e2fdfa6282722885"
uuid = "1a297f60-69ca-5386-bcde-b61e274b549b"
version = "1.0.0"

[[deps.FiniteDiff]]
deps = ["ArrayInterface", "LinearAlgebra", "Requires", "Setfield", "SparseArrays", "StaticArrays"]
git-tree-sha1 = "03fcb1c42ec905d15b305359603888ec3e65f886"
uuid = "6a86dc24-6348-571c-b903-95158fe2bd41"
version = "2.19.0"

[[deps.FiniteDifferences]]
deps = ["ChainRulesCore", "LinearAlgebra", "Printf", "Random", "Richardson", "SparseArrays", "StaticArrays"]
git-tree-sha1 = "3f605dd6db5640c5278f2551afc9427656439f42"
uuid = "26cc04aa-876d-5657-8c51-4c34ba976000"
version = "0.12.26"

[[deps.FixedPointNumbers]]
deps = ["Statistics"]
git-tree-sha1 = "335bfdceacc84c5cdf16aadc768aa5ddfc5383cc"
uuid = "53c48c17-4a7d-5ca2-90c5-79b7896eea93"
version = "0.8.4"

[[deps.FoldsThreads]]
deps = ["Accessors", "FunctionWrappers", "InitialValues", "SplittablesBase", "Transducers"]
git-tree-sha1 = "eb8e1989b9028f7e0985b4268dabe94682249025"
uuid = "9c68100b-dfe1-47cf-94c8-95104e173443"
version = "0.1.1"

[[deps.ForwardDiff]]
deps = ["CommonSubexpressions", "DiffResults", "DiffRules", "LinearAlgebra", "LogExpFunctions", "NaNMath", "Preferences", "Printf", "Random", "SpecialFunctions", "StaticArrays"]
git-tree-sha1 = "00e252f4d706b3d55a8863432e742bf5717b498d"
uuid = "f6369f11-7733-5829-9624-2563aa707210"
version = "0.10.35"

[[deps.FunctionWrappers]]
git-tree-sha1 = "d62485945ce5ae9c0c48f124a84998d755bae00e"
uuid = "069b7b12-0de2-55c6-9aab-29f3d0a68a2e"
version = "1.1.3"

[[deps.Future]]
deps = ["Random"]
uuid = "9fa8497b-333b-5362-9e8d-4d0656e87820"

[[deps.GPUArraysCore]]
deps = ["Adapt"]
git-tree-sha1 = "1cd7f0af1aa58abc02ea1d872953a97359cb87fa"
uuid = "46192b85-c4d5-4398-a991-12ede77f4527"
version = "0.1.4"

[[deps.Hyperscript]]
deps = ["Test"]
git-tree-sha1 = "8d511d5b81240fc8e6802386302675bdf47737b9"
uuid = "47d2ed2b-36de-50cf-bf87-49c2cf4b8b91"
version = "0.0.4"

[[deps.HypertextLiteral]]
deps = ["Tricks"]
git-tree-sha1 = "c47c5fa4c5308f27ccaac35504858d8914e102f9"
uuid = "ac1192a8-f4b3-4bfe-ba22-af5b92cd3ab2"
version = "0.9.4"

[[deps.IOCapture]]
deps = ["Logging", "Random"]
git-tree-sha1 = "f7be53659ab06ddc986428d3a9dcc95f6fa6705a"
uuid = "b5f81e59-6552-4d32-b1f0-c071b021bf89"
version = "0.2.2"

[[deps.InitialValues]]
git-tree-sha1 = "4da0f88e9a39111c2fa3add390ab15f3a44f3ca3"
uuid = "22cec73e-a1b8-11e9-2c92-598750a2cf9c"
version = "0.3.1"

[[deps.IntelOpenMP_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "0cb9352ef2e01574eeebdb102948a58740dcaf83"
uuid = "1d5cc7b8-4909-519e-a0f8-d0f5ad9712d0"
version = "2023.1.0+0"

[[deps.InteractiveUtils]]
deps = ["Markdown"]
uuid = "b77e0a4c-d291-57a0-90e8-8db25a27a240"

[[deps.InverseFunctions]]
deps = ["Test"]
git-tree-sha1 = "49510dfcb407e572524ba94aeae2fced1f3feb0f"
uuid = "3587e190-3f89-42d0-90ee-14403ec27112"
version = "0.1.8"

[[deps.IrrationalConstants]]
git-tree-sha1 = "630b497eafcc20001bba38a4651b327dcfc491d2"
uuid = "92d709cd-6900-40b7-9082-c6be49f344b6"
version = "0.2.2"

[[deps.IterTools]]
git-tree-sha1 = "fa6287a4469f5e048d763df38279ee729fbd44e5"
uuid = "c8e1da08-722c-5040-9ed9-7db0dc04731e"
version = "1.4.0"

[[deps.IteratorInterfaceExtensions]]
git-tree-sha1 = "a3f24677c21f5bbe9d2a714f95dcd58337fb2856"
uuid = "82899510-4779-5014-852e-03e436cf321d"
version = "1.0.0"

[[deps.JLLWrappers]]
deps = ["Preferences"]
git-tree-sha1 = "abc9885a7ca2052a736a600f7fa66209f96506e1"
uuid = "692b3bcd-3c85-4b1f-b108-f13ce0eb3210"
version = "1.4.1"

[[deps.JSON]]
deps = ["Dates", "Mmap", "Parsers", "Unicode"]
git-tree-sha1 = "31e996f0a15c7b280ba9f76636b3ff9e2ae58c9a"
uuid = "682c06a0-de6a-54ab-a142-c8b1cf79cde6"
version = "0.21.4"

[[deps.JuliaVariables]]
deps = ["MLStyle", "NameResolution"]
git-tree-sha1 = "49fb3cb53362ddadb4415e9b73926d6b40709e70"
uuid = "b14d175d-62b4-44ba-8fb7-3064adc8c3ec"
version = "0.2.4"

[[deps.KernelAbstractions]]
deps = ["Adapt", "Atomix", "InteractiveUtils", "LinearAlgebra", "MacroTools", "SnoopPrecompile", "SparseArrays", "StaticArrays", "UUIDs", "UnsafeAtomics", "UnsafeAtomicsLLVM"]
git-tree-sha1 = "976231af02176082fb266a9f96a59da51fcacf20"
uuid = "63c18a36-062a-441e-b654-da1e3ab1ce7c"
version = "0.9.2"

[[deps.LLVM]]
deps = ["CEnum", "LLVMExtra_jll", "Libdl", "Printf", "Unicode"]
git-tree-sha1 = "a8960cae30b42b66dd41808beb76490519f6f9e2"
uuid = "929cbde3-209d-540e-8aea-75f648917ca0"
version = "5.0.0"

[[deps.LLVMExtra_jll]]
deps = ["Artifacts", "JLLWrappers", "LazyArtifacts", "Libdl", "TOML"]
git-tree-sha1 = "09b7505cc0b1cee87e5d4a26eea61d2e1b0dcd35"
uuid = "dad2f222-ce93-54a1-a47d-0025e8a3acab"
version = "0.0.21+0"

[[deps.LaTeXStrings]]
git-tree-sha1 = "f2355693d6778a178ade15952b7ac47a4ff97996"
uuid = "b964fa9f-0449-5b57-a5c2-d3ea65f4040f"
version = "1.3.0"

[[deps.LazyArtifacts]]
deps = ["Artifacts", "Pkg"]
uuid = "4af54fe1-eca0-43a8-85a7-787d91b784e3"

[[deps.LibCURL]]
deps = ["LibCURL_jll", "MozillaCACerts_jll"]
uuid = "b27032c2-a3e7-50c8-80cd-2d36dbcbfd21"

[[deps.LibCURL_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll", "Zlib_jll", "nghttp2_jll"]
uuid = "deac9b47-8bc7-5906-a0fe-35ac56dc84c0"

[[deps.LibGit2]]
deps = ["Base64", "NetworkOptions", "Printf", "SHA"]
uuid = "76f85450-5226-5b5a-8eaa-529ad045b433"

[[deps.LibSSH2_jll]]
deps = ["Artifacts", "Libdl", "MbedTLS_jll"]
uuid = "29816b5a-b9ab-546f-933c-edad1886dfa8"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[deps.LineSearches]]
deps = ["LinearAlgebra", "NLSolversBase", "NaNMath", "Parameters", "Printf"]
git-tree-sha1 = "7bbea35cec17305fc70a0e5b4641477dc0789d9d"
uuid = "d3d80556-e9d4-5f37-9878-2ab0fcc64255"
version = "7.2.0"

[[deps.LinearAlgebra]]
deps = ["Libdl", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[deps.LogExpFunctions]]
deps = ["ChainRulesCore", "ChangesOfVariables", "DocStringExtensions", "InverseFunctions", "IrrationalConstants", "LinearAlgebra"]
git-tree-sha1 = "0a1b7c2863e44523180fdb3146534e265a91870b"
uuid = "2ab3a3ac-af41-5b50-aa03-7779005ae688"
version = "0.3.23"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"

[[deps.LossFunctions]]
deps = ["CategoricalArrays", "Markdown"]
git-tree-sha1 = "d4c7ff8c7281943371e1725000fd538a699024d0"
uuid = "30fc2ffe-d236-52d8-8643-a9d8f7c094a7"
version = "0.9.0"

[[deps.MIMEs]]
git-tree-sha1 = "65f28ad4b594aebe22157d6fac869786a255b7eb"
uuid = "6c6e2e6c-3030-632d-7369-2d6c69616d65"
version = "0.1.4"

[[deps.MKL_jll]]
deps = ["Artifacts", "IntelOpenMP_jll", "JLLWrappers", "LazyArtifacts", "Libdl", "Pkg"]
git-tree-sha1 = "2ce8695e1e699b68702c03402672a69f54b8aca9"
uuid = "856f044c-d86e-5d09-b602-aeab76dc8ba7"
version = "2022.2.0+0"

[[deps.MLStyle]]
git-tree-sha1 = "bc38dff0548128765760c79eb7388a4b37fae2c8"
uuid = "d8e11817-5142-5d16-987a-aa16d5891078"
version = "0.4.17"

[[deps.MLUtils]]
deps = ["ChainRulesCore", "Compat", "DataAPI", "DelimitedFiles", "FLoops", "FoldsThreads", "NNlib", "Random", "ShowCases", "SimpleTraits", "Statistics", "StatsBase", "Tables", "Transducers"]
git-tree-sha1 = "f69cdbb5b7c630c02481d81d50eac43697084fe0"
uuid = "f1d291b0-491e-4a28-83b9-f70985020b54"
version = "0.4.1"

[[deps.MacroTools]]
deps = ["Markdown", "Random"]
git-tree-sha1 = "42324d08725e200c23d4dfb549e0d5d89dede2d2"
uuid = "1914dd2f-81c6-5fcd-8719-6d5c9610ff09"
version = "0.5.10"

[[deps.MakieCore]]
deps = ["Observables"]
git-tree-sha1 = "9926529455a331ed73c19ff06d16906737a876ed"
uuid = "20f20a25-4f0e-4fdf-b5d1-57303727442b"
version = "0.6.3"

[[deps.Markdown]]
deps = ["Base64"]
uuid = "d6f4376e-aef5-505a-96c1-9c027394607a"

[[deps.MbedTLS_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "c8ffd9c3-330d-5841-b78e-0817d7145fa1"

[[deps.MicroCollections]]
deps = ["BangBang", "InitialValues", "Setfield"]
git-tree-sha1 = "629afd7d10dbc6935ec59b32daeb33bc4460a42e"
uuid = "128add7d-3638-4c79-886c-908ea0c25c34"
version = "0.1.4"

[[deps.Missings]]
deps = ["DataAPI"]
git-tree-sha1 = "f66bdc5de519e8f8ae43bdc598782d35a25b1272"
uuid = "e1d29d7a-bbdc-5cf2-9ac0-f12de2c33e28"
version = "1.1.0"

[[deps.Mmap]]
uuid = "a63ad114-7e13-5084-954f-fe012c677804"

[[deps.MozillaCACerts_jll]]
uuid = "14a3606d-f60d-562e-9121-12d972cd8159"

[[deps.MutableArithmetics]]
deps = ["LinearAlgebra", "SparseArrays", "Test"]
git-tree-sha1 = "3295d296288ab1a0a2528feb424b854418acff57"
uuid = "d8a4904e-b15c-11e9-3269-09a3773c0cb0"
version = "1.2.3"

[[deps.NLSolversBase]]
deps = ["DiffResults", "Distributed", "FiniteDiff", "ForwardDiff"]
git-tree-sha1 = "a0b464d183da839699f4c79e7606d9d186ec172c"
uuid = "d41bc354-129a-5804-8e4c-c37616107c6c"
version = "7.8.3"

[[deps.NNlib]]
deps = ["Adapt", "Atomix", "ChainRulesCore", "GPUArraysCore", "KernelAbstractions", "LinearAlgebra", "Pkg", "Random", "Requires", "Statistics"]
git-tree-sha1 = "99e6dbb50d8a96702dc60954569e9fe7291cc55d"
uuid = "872c559c-99b0-510c-b3b7-b6c96a88d5cd"
version = "0.8.20"

[[deps.NaNMath]]
deps = ["OpenLibm_jll"]
git-tree-sha1 = "0877504529a3e5c3343c6f8b4c0381e57e4387e4"
uuid = "77ba4419-2d1f-58cd-9bb1-8ffee604a2e3"
version = "1.0.2"

[[deps.NameResolution]]
deps = ["PrettyPrint"]
git-tree-sha1 = "1a0fa0e9613f46c9b8c11eee38ebb4f590013c5e"
uuid = "71a1bf82-56d0-4bbc-8a3c-48b961074391"
version = "0.1.5"

[[deps.NetworkOptions]]
uuid = "ca575930-c2e3-43a9-ace4-1e988b2c1908"

[[deps.Observables]]
git-tree-sha1 = "6862738f9796b3edc1c09d0890afce4eca9e7e93"
uuid = "510215fc-4207-5dde-b226-833fc4488ee2"
version = "0.5.4"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"

[[deps.OpenLibm_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "05823500-19ac-5b8b-9628-191a04bc5112"

[[deps.OpenSpecFun_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "13652491f6856acfd2db29360e1bbcd4565d04f1"
uuid = "efe28fd5-8261-553b-a9e1-b2916fc3738e"
version = "0.5.5+0"

[[deps.Optim]]
deps = ["Compat", "FillArrays", "ForwardDiff", "LineSearches", "LinearAlgebra", "NLSolversBase", "NaNMath", "Parameters", "PositiveFactorizations", "Printf", "SparseArrays", "StatsBase"]
git-tree-sha1 = "a89b11f0f354f06099e4001c151dffad7ebab015"
uuid = "429524aa-4258-5aef-a3af-852621145aeb"
version = "1.7.5"

[[deps.OrderedCollections]]
git-tree-sha1 = "d321bf2de576bf25ec4d3e4360faca399afca282"
uuid = "bac558e1-5e72-5ebc-8fee-abe8a469f55d"
version = "1.6.0"

[[deps.Parameters]]
deps = ["OrderedCollections", "UnPack"]
git-tree-sha1 = "34c0e9ad262e5f7fc75b10a9952ca7692cfc5fbe"
uuid = "d96e819e-fc66-5662-9728-84c9c7592b0a"
version = "0.12.3"

[[deps.Parsers]]
deps = ["Dates", "SnoopPrecompile"]
git-tree-sha1 = "478ac6c952fddd4399e71d4779797c538d0ff2bf"
uuid = "69de0a69-1ddd-5017-9359-2bf0b02dc9f0"
version = "2.5.8"

[[deps.Pkg]]
deps = ["Artifacts", "Dates", "Downloads", "LibGit2", "Libdl", "Logging", "Markdown", "Printf", "REPL", "Random", "SHA", "Serialization", "TOML", "Tar", "UUIDs", "p7zip_jll"]
uuid = "44cfe95a-1eb2-52ea-b672-e2afdf69b78f"

[[deps.PlotlyBase]]
deps = ["ColorSchemes", "Dates", "DelimitedFiles", "DocStringExtensions", "JSON", "LaTeXStrings", "Logging", "Parameters", "Pkg", "REPL", "Requires", "Statistics", "UUIDs"]
git-tree-sha1 = "56baf69781fc5e61607c3e46227ab17f7040ffa2"
uuid = "a03496cd-edff-5a9b-9e67-9cda94a718b5"
version = "0.8.19"

[[deps.PlutoPlotly]]
deps = ["AbstractPlutoDingetjes", "Colors", "Dates", "HypertextLiteral", "InteractiveUtils", "LaTeXStrings", "Markdown", "PlotlyBase", "PlutoUI", "Reexport"]
git-tree-sha1 = "dec81dcd52748ffc59ce3582e709414ff78d947f"
uuid = "8e989ff0-3d88-8e9f-f020-2b208a939ff0"
version = "0.3.6"

[[deps.PlutoUI]]
deps = ["AbstractPlutoDingetjes", "Base64", "ColorTypes", "Dates", "FixedPointNumbers", "Hyperscript", "HypertextLiteral", "IOCapture", "InteractiveUtils", "JSON", "Logging", "MIMEs", "Markdown", "Random", "Reexport", "URIs", "UUIDs"]
git-tree-sha1 = "5bb5129fdd62a2bbbe17c2756932259acf467386"
uuid = "7f904dfe-b85e-4ff6-b463-dae2292396a8"
version = "0.7.50"

[[deps.Polynomials]]
deps = ["ChainRulesCore", "LinearAlgebra", "MakieCore", "MutableArithmetics", "RecipesBase"]
git-tree-sha1 = "66443538efd80fac4962b74523ec0b35c9464a21"
uuid = "f27b6e38-b328-58d1-80ce-0feddd5e7a45"
version = "3.2.9"

[[deps.PositiveFactorizations]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "17275485f373e6673f7e7f97051f703ed5b15b20"
uuid = "85a6dd25-e78a-55b7-8502-1745935b8125"
version = "0.2.4"

[[deps.PrecompileTools]]
deps = ["Preferences"]
git-tree-sha1 = "bc2bda41d798c2e66e7c44a11007bb329b15941b"
uuid = "aea7be01-6a6a-4083-8856-8a6e6704d82a"
version = "1.0.1"

[[deps.Preferences]]
deps = ["TOML"]
git-tree-sha1 = "47e5f437cc0e7ef2ce8406ce1e7e24d44915f88d"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.3.0"

[[deps.PrettyPrint]]
git-tree-sha1 = "632eb4abab3449ab30c5e1afaa874f0b98b586e4"
uuid = "8162dcfd-2161-5ef2-ae6c-7681170c5f98"
version = "0.2.0"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"

[[deps.ProgressLogging]]
deps = ["Logging", "SHA", "UUIDs"]
git-tree-sha1 = "80d919dee55b9c50e8d9e2da5eeafff3fe58b539"
uuid = "33c8b6b6-d38a-422a-b730-caa89a2f386c"
version = "0.1.4"

[[deps.REPL]]
deps = ["InteractiveUtils", "Markdown", "Sockets", "Unicode"]
uuid = "3fa0cd96-eef1-5676-8a61-b3b8758bbffb"

[[deps.Random]]
deps = ["SHA", "Serialization"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[deps.RecipesBase]]
deps = ["SnoopPrecompile"]
git-tree-sha1 = "261dddd3b862bd2c940cf6ca4d1c8fe593e457c8"
uuid = "3cdcf5f2-1ef4-517c-9805-6587b60abb01"
version = "1.3.3"

[[deps.Reexport]]
git-tree-sha1 = "45e428421666073eab6f2da5c9d310d99bb12f9b"
uuid = "189a3867-3050-52da-a836-e630ba90ab69"
version = "1.2.2"

[[deps.Requires]]
deps = ["UUIDs"]
git-tree-sha1 = "838a3a4188e2ded87a4f9f184b4b0d78a1e91cb7"
uuid = "ae029012-a4dd-5104-9daa-d747884805df"
version = "1.3.0"

[[deps.Richardson]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "e03ca566bec93f8a3aeb059c8ef102f268a38949"
uuid = "708f8203-808e-40c0-ba2d-98a6953ed40d"
version = "1.4.0"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[deps.Setfield]]
deps = ["ConstructionBase", "Future", "MacroTools", "StaticArraysCore"]
git-tree-sha1 = "e2cc6d8c88613c05e1defb55170bf5ff211fbeac"
uuid = "efcf1570-3423-57d1-acb7-fd33fddbac46"
version = "1.1.1"

[[deps.ShowCases]]
git-tree-sha1 = "7f534ad62ab2bd48591bdeac81994ea8c445e4a5"
uuid = "605ecd9f-84a6-4c9e-81e2-4798472b76a3"
version = "0.1.0"

[[deps.SimpleTraits]]
deps = ["InteractiveUtils", "MacroTools"]
git-tree-sha1 = "5d7e3f4e11935503d3ecaf7186eac40602e7d231"
uuid = "699a6c99-e7fa-54fc-8d76-47d257e15c1d"
version = "0.9.4"

[[deps.SnoopPrecompile]]
deps = ["Preferences"]
git-tree-sha1 = "e760a70afdcd461cf01a575947738d359234665c"
uuid = "66db9d55-30c0-4569-8b51-7e840670fc0c"
version = "1.0.3"

[[deps.Sockets]]
uuid = "6462fe0b-24de-5631-8697-dd941f90decc"

[[deps.SortingAlgorithms]]
deps = ["DataStructures"]
git-tree-sha1 = "a4ada03f999bd01b3a25dcaa30b2d929fe537e00"
uuid = "a2af1166-a08f-5f64-846c-94a0d3cef48c"
version = "1.1.0"

[[deps.SparseArrays]]
deps = ["LinearAlgebra", "Random"]
uuid = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"

[[deps.SpecialFunctions]]
deps = ["ChainRulesCore", "IrrationalConstants", "LogExpFunctions", "OpenLibm_jll", "OpenSpecFun_jll"]
git-tree-sha1 = "ef28127915f4229c971eb43f3fc075dd3fe91880"
uuid = "276daf66-3868-5448-9aa4-cd146d93841b"
version = "2.2.0"

[[deps.SplittablesBase]]
deps = ["Setfield", "Test"]
git-tree-sha1 = "e08a62abc517eb79667d0a29dc08a3b589516bb5"
uuid = "171d559e-b47b-412a-8079-5efa626c420e"
version = "0.1.15"

[[deps.StaticArrays]]
deps = ["LinearAlgebra", "Random", "StaticArraysCore", "Statistics"]
git-tree-sha1 = "63e84b7fdf5021026d0f17f76af7c57772313d99"
uuid = "90137ffa-7385-5640-81b9-e52037218182"
version = "1.5.21"

[[deps.StaticArraysCore]]
git-tree-sha1 = "6b7ba252635a5eff6a0b0664a41ee140a1c9e72a"
uuid = "1e83bf80-4336-4d27-bf5d-d5a4f845583c"
version = "1.4.0"

[[deps.Statistics]]
deps = ["LinearAlgebra", "SparseArrays"]
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"

[[deps.StatsAPI]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "45a7769a04a3cf80da1c1c7c60caf932e6f4c9f7"
uuid = "82ae8749-77ed-4fe6-ae5f-f523153014b0"
version = "1.6.0"

[[deps.StatsBase]]
deps = ["DataAPI", "DataStructures", "LinearAlgebra", "LogExpFunctions", "Missings", "Printf", "Random", "SortingAlgorithms", "SparseArrays", "Statistics", "StatsAPI"]
git-tree-sha1 = "d1bf48bfcc554a3761a133fe3a9bb01488e06916"
uuid = "2913bbd2-ae8a-5f71-8c99-4fb6c76f3a91"
version = "0.33.21"

[[deps.SuiteSparse]]
deps = ["Libdl", "LinearAlgebra", "Serialization", "SparseArrays"]
uuid = "4607b0f0-06f3-5cda-b6b1-a6196a1729e9"

[[deps.TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"

[[deps.TableTraits]]
deps = ["IteratorInterfaceExtensions"]
git-tree-sha1 = "c06b2f539df1c6efa794486abfb6ed2022561a39"
uuid = "3783bdb8-4a98-5b6b-af9a-565f29a5fe9c"
version = "1.0.1"

[[deps.Tables]]
deps = ["DataAPI", "DataValueInterfaces", "IteratorInterfaceExtensions", "LinearAlgebra", "OrderedCollections", "TableTraits", "Test"]
git-tree-sha1 = "1544b926975372da01227b382066ab70e574a3ec"
uuid = "bd369af6-aec1-5ad0-b16a-f7cc5008161c"
version = "1.10.1"

[[deps.Tar]]
deps = ["ArgTools", "SHA"]
uuid = "a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e"

[[deps.TensorCore]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "1feb45f88d133a655e001435632f019a9a1bcdb6"
uuid = "62fd8b95-f654-4bbd-a8a5-9c27f68ccd50"
version = "0.1.1"

[[deps.Test]]
deps = ["InteractiveUtils", "Logging", "Random", "Serialization"]
uuid = "8dfed614-e22c-5e08-85e1-65c5234f0b40"

[[deps.Transducers]]
deps = ["Adapt", "ArgCheck", "BangBang", "Baselet", "CompositionsBase", "DefineSingletons", "Distributed", "InitialValues", "Logging", "Markdown", "MicroCollections", "Requires", "Setfield", "SplittablesBase", "Tables"]
git-tree-sha1 = "c42fa452a60f022e9e087823b47e5a5f8adc53d5"
uuid = "28d57a85-8fef-5791-bfe6-a80928e7c999"
version = "0.4.75"

[[deps.Tricks]]
git-tree-sha1 = "aadb748be58b492045b4f56166b5188aa63ce549"
uuid = "410a4b4d-49e4-4fbc-ab6d-cb71b17b3775"
version = "0.1.7"

[[deps.URIs]]
git-tree-sha1 = "074f993b0ca030848b897beff716d93aca60f06a"
uuid = "5c2747f8-b7ea-4ff2-ba2e-563bfd36b1d4"
version = "1.4.2"

[[deps.UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"

[[deps.UnPack]]
git-tree-sha1 = "387c1f73762231e86e0c9c5443ce3b4a0a9a0c2b"
uuid = "3a884ed6-31ef-47d7-9d2a-63182c4928ed"
version = "1.0.2"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"

[[deps.UnsafeAtomics]]
git-tree-sha1 = "6331ac3440856ea1988316b46045303bef658278"
uuid = "013be700-e6cd-48c3-b4a1-df204f14c38f"
version = "0.2.1"

[[deps.UnsafeAtomicsLLVM]]
deps = ["LLVM", "UnsafeAtomics"]
git-tree-sha1 = "ea37e6066bf194ab78f4e747f5245261f17a7175"
uuid = "d80eeb9a-aca5-4d75-85e5-170c8b632249"
version = "0.1.2"

[[deps.Zlib_jll]]
deps = ["Libdl"]
uuid = "83775a58-1f1d-513f-b197-d71354ab007a"

[[deps.ZygoteRules]]
deps = ["ChainRulesCore", "MacroTools"]
git-tree-sha1 = "977aed5d006b840e2e40c0b48984f7463109046d"
uuid = "700de1a5-db45-46bc-99cf-38207098b444"
version = "0.2.3"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl", "OpenBLAS_jll"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"

[[deps.nghttp2_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850ede-7688-5339-a07c-302acd2aaf8d"

[[deps.p7zip_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "3f19e933-33d8-53b3-aaab-bd5110c3b7a0"
"""

# ╔═╡ Cell order:
# ╠═3c540889-49dc-415c-acbc-3494897b260c
# ╟─9c32f5bc-f6d1-4048-903a-27224aaa1f40
# ╟─881c7368-57df-469a-96ec-821512cf98e0
# ╟─65efba3b-16b0-4113-a59e-809365e7bdd6
# ╠═1c67cda8-7712-4d5b-a2aa-af47f290f745
# ╠═55c7f981-96a7-40e9-811f-37334622565b
# ╟─cb83dbd1-c423-4b27-b29e-7dc8051f43d5
# ╟─86ed93a1-c7b9-4b3a-8cb5-ca4405cff3df
# ╠═1a33a93e-c2e5-4e1b-96d7-929ecf470d03
# ╟─2855c8cf-8364-4c6c-a122-781b99440e89
# ╟─8d3a571b-0e81-435a-9665-7e1584b55370
# ╠═d31ef4d7-3e58-4b6e-99dd-f25656d109b5
# ╠═17dd3d57-d5ca-443c-b003-b3a97b963d57
# ╟─d812711d-d02f-44bb-9e73-accd1623dea1
# ╟─122c2aa4-baec-4288-ab53-afa1d977c486
# ╠═7928a88c-f217-4338-a6a5-50ab2d422480
# ╟─5b271e5f-879c-4c43-825a-9660f322febd
# ╠═6a8139c4-12c1-4d18-bd1e-14334290aec1
# ╟─dd78c460-a446-46f5-af57-7e859383348d
# ╠═ebab6005-2ad6-4057-9275-bf7d53d41b0b
# ╟─e233afec-6049-4277-8be9-95687c4589b5
# ╠═77c9696c-58c5-40bf-acd0-16d5cf877810
# ╟─4171af00-1d14-45ba-9fd3-a2c30d0b759f
# ╟─22b8db91-73a0-46df-87fd-7cf0b66ee37d
# ╠═8b3776bd-509b-4232-9737-36c9ae003350
# ╟─f26f1b1a-18e0-413c-86a9-351ba5dfaebf
# ╟─104dc052-f82a-4dea-a899-749db38a3fea
# ╠═3be62716-f2d9-434c-a69a-ed272b89c85d
# ╟─438da68f-f23e-4712-9dd6-0dd030ad8656
# ╟─a3a9deea-e2d6-4d58-90d7-5a54be176289
# ╟─1dc2ca10-5ba3-4efa-b6d9-d203cf91598b
# ╠═e7e72f61-d79e-4a82-ad9c-129191c8a8c2
# ╠═ee679ef2-3cf8-4b3d-a717-ae2d088b5fe8
# ╟─270e5d4a-c666-43e7-8c64-02b9fed977e4
# ╠═3f5f9d8a-3647-4a16-89ba-bd7a31c01064
# ╟─66f9c698-61e3-4b61-aff3-dfc67eb2f6af
# ╠═6f9cacdb-ef82-4085-8030-23703f06ccbc
# ╟─bc8a0c2c-3d92-46a5-ab3f-fec75f4a5863
# ╟─92d05447-6d0e-4ee0-a330-244b9c65c871
# ╟─77e134d8-bd8b-4303-8c44-a4920cf0ee81
# ╟─8d161f09-8339-4277-8739-ff76607f7abf
# ╠═40bcf5e3-4427-482c-9054-622f5625146f
# ╠═b525408f-0d7d-4333-a789-def42565520c
# ╠═99541b49-caf2-40ab-b299-081111e35675
# ╟─86389c2b-a762-4b19-ae4a-2744623fa496
# ╠═637bad58-4388-47ba-85af-a43806238bd6
# ╠═98721f55-81bf-45d6-b319-f8e48538589d
# ╟─1521a09f-a954-4ba5-a755-0e8d24008002
# ╟─fc49a6d7-a1b1-458a-a9ad-e120282bbabc
# ╠═c5815f5e-9164-11ec-10e1-691834761dff
# ╟─bf807de9-fb16-4dbb-b3dd-2bb1ef52feaf
# ╠═2afbe8bf-6c6d-473d-980b-f455ab2189d2
# ╟─ae8012be-e7ab-4e85-a27f-febf08b3380b
# ╠═ce89710a-48d8-46d4-83b4-163a7eb0a2e5
# ╟─c34b1a5d-5078-4b8f-94d1-a088cbe5ab3e
# ╟─9bc38d55-285b-4b83-98d9-d7f9e03405d1
# ╠═706e0c9a-632c-42d9-b648-beb990e81dbb
# ╟─dc40de83-621e-48c4-8481-169e1d1f780e
# ╠═a8ca8464-347c-43c2-823b-516a92d4cc7e
# ╟─bc98aa5a-1668-4566-a10c-8bfaade05226
# ╠═ad21da29-f6ff-4a94-be87-4e88640cddbf
# ╟─ecac675d-8281-4b6e-a2a3-c75ddf45de47
# ╠═8298ae48-0ddc-49a9-a43f-8434e4cc3758
# ╟─e8333b23-53c3-445e-9ca3-6b278359f8ab
# ╠═9248af7f-dc1a-4bf6-8f3f-304db73fc604
# ╟─d377f637-ffe0-499d-bc4e-9c021a6d7da4
# ╠═00a637a6-ddc4-4830-be65-1891d3cb18bc
# ╟─69a34d5f-e120-46b8-823e-cd05a455c015
# ╠═e08bf013-00c7-4870-82d8-19b899e7208d
# ╟─6be2f4c2-e9ed-43c2-b66c-ef3176bb9000
# ╠═aa19e992-2735-4324-8fd7-15eacadf0faa
# ╠═e2127d9b-f2a4-4970-a36e-5fa70c304ca7
# ╟─5e4e21a6-a1d1-4c7f-96f6-8ba49a1def29
# ╠═15bbf544-34bd-4d38-bac5-0f43b1305df3
# ╟─b5f7d46c-be1e-46f5-aec3-4525e4ba2d72
# ╠═9b744e72-07a2-4f8c-b88c-e0b1131794d0
# ╠═31d742a4-100f-4744-afe5-381b265b6f4c
# ╟─bf09ab3b-0360-4d76-9a45-ac757dc68207
# ╠═f4d91971-f806-4c5c-8548-b58a20acfb2c
# ╟─0454ce0a-d6de-427f-bbdc-3bcec21327f2
# ╠═f2fb92bb-33d6-4e15-8caf-b245e000ad69
# ╠═4a4f1300-94ba-4c1b-9d10-9e955d194ff6
# ╟─42854ed8-bfa8-46c0-819a-3664c0aa58ad
# ╠═ddb37082-cae0-4a68-ab55-19563d8727ed
# ╟─bd8b9a0c-6664-4ba8-9795-0a496e932d85
# ╠═7d00ecf7-80ba-4eee-99f6-b03f7b1f6e52
# ╠═6e1cb21c-f10a-4dd8-8041-70e7b1fb79a3
# ╠═5d7d9a8d-0c96-4533-862b-98418b84566b
# ╟─61380107-e383-4926-a8d3-ec9e292816c0
# ╠═a42d3b46-ae60-41d1-8b2d-e85af895ec14
# ╟─7b2e2eee-2d22-42e3-bfc5-b145b425dc2a
# ╠═ff1ba1f6-f127-4c47-8198-aeff5f051ad9
# ╟─79440e21-3fb9-4f65-8739-a9efea7f6769
# ╠═a24bfc41-8e50-4a68-b5cf-3973f4003221
# ╟─209ba8ad-2e04-4b6a-94aa-f06bbb7791ac
# ╠═489dcf10-b7f2-4544-b80d-3588ff00ff4a
# ╠═008b99f2-c9f3-4d30-a234-393e1ed69840
# ╟─68d098d3-3148-4d24-9e0c-f6e97a8da496
# ╠═02844bc9-9faf-413f-82d2-28d6ba01668d
# ╠═9d319561-38c9-46c8-aaf6-06d0a41ed0bf
# ╟─b2891506-ac37-4e01-af2b-4ac568b1496a
# ╠═199908d6-f5fd-4461-be53-39919a103835
# ╟─c0b95424-d5e5-4ece-99ea-18c05fd0ef56
# ╠═66f3fda7-bd78-4fc8-9ecd-a2c0db3c36af
# ╟─8a99fcde-20c6-4586-8a62-6c4374897d98
# ╠═e0c74f26-c863-464a-a37e-526ffbaeed03
# ╟─f95a08ce-a38d-4b7f-b478-4dbfa607740e
# ╟─90953c64-8a87-4065-8c34-d0ead540b728
# ╠═b993e3e6-8d4e-4de7-aa4b-6a2e3bd12212
# ╟─a62839d5-837b-4c37-996f-33659c34911c
# ╠═2ea24e92-d66e-4c60-ad0b-f671d894fef2
# ╟─7f797571-055e-4975-9c26-fc968bbc0094
# ╠═d7b37c59-e0b3-4e47-86d3-7f1df7400f09
# ╟─fbe44944-499a-4881-94b6-07855d1165aa
# ╠═b7f4078a-ead0-4d42-8b44-4f471eefc6fc
# ╟─7e80aeb0-1f63-4303-b374-bf2acee5c54d
# ╠═a72184ba-f642-4bed-8a31-c70d5fdb88e2
# ╟─a055de92-9eba-4ca8-a579-f00bfa855e4a
# ╠═f1b9f4a0-5554-48fd-9268-4d7b03d74688
# ╟─12abff88-f713-4211-9191-4741a41c07d2
# ╠═99ba8f6a-551a-432b-abb1-a79be233fa46
# ╟─3b7618e1-f561-445e-b3b1-697e564ee4f3
# ╠═54986cc5-2ea0-4097-bbe0-1ed174ec9ae4
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
